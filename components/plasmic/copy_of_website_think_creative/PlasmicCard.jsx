// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bWHFFGzvmXLfYr1WgyzKPi
// Component: BJgIPFYmTugZ
import * as React from "react";
import { useRouter } from "next/router";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  renderPlasmicSlot,
  useCurrentUser
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: bWHFFGzvmXLfYr1WgyzKPi/projectcss
import sty from "./PlasmicCard.module.css"; // plasmic-import: BJgIPFYmTugZ/css
import TaskAltIcon from "./icons/PlasmicIcon__TaskAlt"; // plasmic-import: EVyD8Grff9SI/icon

createPlasmicElementProxy;

export const PlasmicCard__VariantProps = new Array();

export const PlasmicCard__ArgProps = new Array("frame39475");

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCard__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  return (
    <div
      data-plasmic-name={"frame39472"}
      data-plasmic-override={overrides.frame39472}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_library_plasmic_color_type_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.frame39472
      )}
    >
      <div
        data-plasmic-name={"rectangle648"}
        data-plasmic-override={overrides.rectangle648}
        className={classNames(projectcss.all, sty.rectangle648)}
      />

      <Stack__
        as={"div"}
        data-plasmic-name={"frame39473"}
        data-plasmic-override={overrides.frame39473}
        hasGap={true}
        className={classNames(projectcss.all, sty.frame39473)}
      >
        <div
          data-plasmic-name={"frame7"}
          data-plasmic-override={overrides.frame7}
          className={classNames(projectcss.all, sty.frame7)}
        >
          <TaskAltIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            role={"img"}
          />
        </div>
        <Stack__
          as={"div"}
          data-plasmic-name={"frame39474"}
          data-plasmic-override={overrides.frame39474}
          hasGap={true}
          className={classNames(projectcss.all, sty.frame39474)}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <React.Fragment>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jCfp1
                  )}
                >
                  {"Empowering Startups for Global Challenges"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__aIlbj
                  )}
                >
                  {
                    "We connect innovators with investors who are looking to generate both economic and social returns. Our platform fosters solutions that drive socioeconomic transformation at the grassroots level."
                  }
                </div>
              </React.Fragment>
            ),

            value: args.frame39475
          })}
        </Stack__>
      </Stack__>
    </div>
  );
}

const PlasmicDescendants = {
  frame39472: [
    "frame39472",
    "rectangle648",
    "frame39473",
    "frame7",
    "svg",
    "frame39474"
  ],

  rectangle648: ["rectangle648"],
  frame39473: ["frame39473", "frame7", "svg", "frame39474"],
  frame7: ["frame7", "svg"],
  svg: ["svg"],
  frame39474: ["frame39474"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCard__ArgProps,
          internalVariantPropNames: PlasmicCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "frame39472") {
    func.displayName = "PlasmicCard";
  } else {
    func.displayName = `PlasmicCard.${nodeName}`;
  }
  return func;
}

export const PlasmicCard = Object.assign(
  // Top-level PlasmicCard renders the root element
  makeNodeComponent("frame39472"),
  {
    // Helper components rendering sub-elements
    rectangle648: makeNodeComponent("rectangle648"),
    frame39473: makeNodeComponent("frame39473"),
    frame7: makeNodeComponent("frame7"),
    svg: makeNodeComponent("svg"),
    frame39474: makeNodeComponent("frame39474"),
    // Metadata about props expected for PlasmicCard
    internalVariantProps: PlasmicCard__VariantProps,
    internalArgProps: PlasmicCard__ArgProps
  }
);

export default PlasmicCard;
/* prettier-ignore-end */
