// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bWHFFGzvmXLfYr1WgyzKPi
// Component: zzK0XLg98PZd
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import {
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateStateOnChangeProp,
  generateStateValueProp,
  hasVariant,
  set as $stateSet,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import TextInput from "../../TextInput"; // plasmic-import: FNRjNEPGBU62/component
import Select from "../../Select"; // plasmic-import: QNq2mEWG3oe5/component
import Button from "../../Button"; // plasmic-import: WHYlEpdhrnG1/component
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { useScreenVariants as useScreenVariantsejsPqseMOn6R } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: EjsPqseMOn6r/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: bWHFFGzvmXLfYr1WgyzKPi/projectcss
import sty from "./PlasmicCanvasEnterpreneursEn.module.css"; // plasmic-import: zzK0XLg98PZd/css
import ArrowDownwardIcon from "./icons/PlasmicIcon__ArrowDownward"; // plasmic-import: qhP130KMjlRV/icon
import Line9Icon from "./icons/PlasmicIcon__Line9"; // plasmic-import: WsSQlShxK_dS/icon
import ThinkCreativeLogoIcon from "./icons/PlasmicIcon__ThinkCreativeLogo"; // plasmic-import: bRFBfvw10uJX/icon
import CanvasLogo2Icon from "./icons/PlasmicIcon__CanvasLogo2"; // plasmic-import: jh8JB6cVEVx9/icon
import SocialMediaIconSquareFacebookIcon from "./icons/PlasmicIcon__SocialMediaIconSquareFacebook"; // plasmic-import: yLUXlrvbsZoG/icon
import SocialMediaIconSquareInstagramIcon from "./icons/PlasmicIcon__SocialMediaIconSquareInstagram"; // plasmic-import: gI4BGKbWorHa/icon
import Group73Icon from "./icons/PlasmicIcon__Group73"; // plasmic-import: HL7-S_wJ6XKa/icon
import Frame7SvgIcon from "./icons/PlasmicIcon__Frame7Svg"; // plasmic-import: oXxcYLnd6x5l/icon
import PasswordIcon from "./icons/PlasmicIcon__Password"; // plasmic-import: we1OhbWb0rjR/icon
import ChevronIcon from "./icons/PlasmicIcon__Chevron"; // plasmic-import: qBE-9ZVs4cGw/icon
import EmailIcon from "./icons/PlasmicIcon__Email"; // plasmic-import: dL42h3bLaL0H/icon
import PhoneIcon from "./icons/PlasmicIcon__Phone"; // plasmic-import: fqQ65QTeXy9p/icon
import MarkIcon from "./icons/PlasmicIcon__Mark"; // plasmic-import: vNr_0fp69FPw/icon

createPlasmicElementProxy;

export const PlasmicCanvasEnterpreneursEn__VariantProps = new Array();

export const PlasmicCanvasEnterpreneursEn__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCanvasEnterpreneursEn__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "s")
            ? true
            : hasVariant(globalVariants, "screen", "mobile")
            ? false
            : true
      },
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "variable2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsejsPqseMOn6R()
  });
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_library_plasmic_color_type_css.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"enterpreneursPage"}
            data-plasmic-override={overrides.enterpreneursPage}
            className={classNames(projectcss.all, sty.enterpreneursPage)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"navElements"}
              data-plasmic-override={overrides.navElements}
              hasGap={true}
              className={classNames(projectcss.all, sty.navElements)}
            >
              <PlasmicImg__
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"50px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"48px"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/copy_of_website_think_creative/images/canvas3.svg",
                  fullWidth: 48,
                  fullHeight: 50,
                  aspectRatio: 0.96
                }}
              />

              <Stack__
                as={"div"}
                data-plasmic-name={"pageContent"}
                data-plasmic-override={overrides.pageContent}
                hasGap={true}
                className={classNames(projectcss.all, sty.pageContent)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tnnhG
                  )}
                >
                  {"Initiatives"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__aCFy
                  )}
                >
                  {"About"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__p7G7K
                  )}
                >
                  {"Contact us"}
                </div>
              </Stack__>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mrq73
                )}
              >
                {"AR"}
              </div>
            </Stack__>
            <div
              data-plasmic-name={"frame39517"}
              data-plasmic-override={overrides.frame39517}
              className={classNames(projectcss.all, sty.frame39517)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"frame39518"}
                data-plasmic-override={overrides.frame39518}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame39518)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dDo3K
                  )}
                >
                  {"Canvas for Entrepreneurs"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hqKJe
                  )}
                >
                  {
                    "Are you seeking to get a project off the ground or grow into the  next stage? \nHere\u2019s how Canvas can help."
                  }
                </div>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"frame39531"}
                  data-plasmic-override={overrides.frame39531}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame39531)}
                >
                  <div
                    data-plasmic-name={"text"}
                    data-plasmic-override={overrides.text}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text
                    )}
                  >
                    {"Get Started"}
                  </div>
                  <ArrowDownwardIcon
                    className={classNames(projectcss.all, sty.svg__cI1Ew)}
                    role={"img"}
                  />
                </Stack__>
              </Stack__>
            </div>
            <Stack__
              as={"div"}
              data-plasmic-name={"frame39513"}
              data-plasmic-override={overrides.frame39513}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame39513)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"frame39510"}
                data-plasmic-override={overrides.frame39510}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame39510)}
              >
                <div
                  data-plasmic-name={"tPrivateSector"}
                  data-plasmic-override={overrides.tPrivateSector}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.tPrivateSector
                  )}
                >
                  {"Funding Opportunities"}
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__pvLcX)}>
                  <div
                    data-plasmic-name={"increaseTheNumberOfStartups"}
                    data-plasmic-override={
                      overrides.increaseTheNumberOfStartups
                    }
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.increaseTheNumberOfStartups
                    )}
                  >
                    {
                      " Connect with investors tailored to \nyour startup's needs."
                    }
                  </div>
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"frame39511"}
                data-plasmic-override={overrides.frame39511}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame39511)}
              >
                <div
                  data-plasmic-name={"tPrivateSector2"}
                  data-plasmic-override={overrides.tPrivateSector2}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.tPrivateSector2
                  )}
                >
                  {"Mentorship Programs"}
                </div>
                <div
                  data-plasmic-name={"increaseTheNumberOfStartups2"}
                  data-plasmic-override={overrides.increaseTheNumberOfStartups2}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.increaseTheNumberOfStartups2
                  )}
                >
                  {
                    "Get support from seasoned mentors who can help you overcome challenges and make better progress."
                  }
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"frame39512"}
                data-plasmic-override={overrides.frame39512}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame39512)}
              >
                <div
                  data-plasmic-name={"tPrivateSector3"}
                  data-plasmic-override={overrides.tPrivateSector3}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.tPrivateSector3
                  )}
                >
                  {"Networking Opportunities"}
                </div>
                <div
                  data-plasmic-name={"increaseTheNumberOfStartups3"}
                  data-plasmic-override={overrides.increaseTheNumberOfStartups3}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.increaseTheNumberOfStartups3
                  )}
                >
                  {
                    "Join a community of like-minded entrepreneurs to share experiences and learn from one another."
                  }
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"frame39508"}
                data-plasmic-override={overrides.frame39508}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame39508)}
              >
                <div
                  data-plasmic-name={"tPrivateSector4"}
                  data-plasmic-override={overrides.tPrivateSector4}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.tPrivateSector4
                  )}
                >
                  {"Workshops and Resources"}
                </div>
                <div className={classNames(projectcss.all, sty.freeBox___3GO6)}>
                  <div
                    data-plasmic-name={"increaseTheNumberOfStartups4"}
                    data-plasmic-override={
                      overrides.increaseTheNumberOfStartups4
                    }
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.increaseTheNumberOfStartups4
                    )}
                  >
                    {
                      "Participate in workshops to develop your skills in pitching, business development, and investment strategies."
                    }
                  </div>
                </div>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"frame39538"}
              data-plasmic-override={overrides.frame39538}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame39538)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"frame39536"}
                data-plasmic-override={overrides.frame39536}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame39536)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___4LDp
                  )}
                >
                  {"We will provide.."}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zmVm
                  )}
                >
                  {
                    "Are you an entrepreneur with an existing start-up?\nYou have a company with a unique entrepreneurial model.\nYou are looking to scale up and don\u2019t know how to find investment.\nYou are looking for investment opportunities.\nYou want to meet fellow experienced entrepreneurs and investors."
                  }
                </div>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"frame39529"}
              data-plasmic-override={overrides.frame39529}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame39529)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xKzJ6
                )}
              >
                {"Entrepreneurs\nFill in the Registration Form"}
              </div>
              <Line9Icon
                className={classNames(projectcss.all, sty.svg__izaGw)}
                role={"img"}
              />

              <Stack__
                as={"form"}
                data-plasmic-name={"form"}
                data-plasmic-override={overrides.form}
                hasGap={true}
                action={"post"}
                className={classNames(projectcss.all, sty.form)}
                method={``}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"username"}
                  data-plasmic-override={overrides.username}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.username)}
                >
                  <div
                    data-plasmic-name={"inputTextLabel"}
                    data-plasmic-override={overrides.inputTextLabel}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.inputTextLabel
                    )}
                  >
                    {"Full Name*"}
                  </div>
                  <TextInput
                    data-plasmic-name={"textInput2"}
                    data-plasmic-override={overrides.textInput2}
                    className={classNames("__wab_instance", sty.textInput2)}
                    name={"FullName"}
                    onChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "textInput2",
                        "value"
                      ])((e => e.target?.value).apply(null, eventArgs));
                    }}
                    placeholder={"Enter Fullname"}
                    required={true}
                    type={"text"}
                    value={
                      generateStateValueProp($state, ["textInput2", "value"]) ??
                      ""
                    }
                  />

                  {false ? (
                    <div
                      data-plasmic-name={"assistiveText"}
                      data-plasmic-override={overrides.assistiveText}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.assistiveText
                      )}
                    >
                      {"Your password is between 4 and 12 characters"}
                    </div>
                  ) : null}
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"username2"}
                  data-plasmic-override={overrides.username2}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.username2)}
                >
                  <div
                    data-plasmic-name={"inputTextLabel2"}
                    data-plasmic-override={overrides.inputTextLabel2}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.inputTextLabel2
                    )}
                  >
                    {"Start Up Name*"}
                  </div>
                  <TextInput
                    data-plasmic-name={"textInput3"}
                    data-plasmic-override={overrides.textInput3}
                    className={classNames("__wab_instance", sty.textInput3)}
                    name={"Start Up Name"}
                    onChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "textInput3",
                        "value"
                      ])((e => e.target?.value).apply(null, eventArgs));
                    }}
                    placeholder={"Your Start Up name"}
                    required={true}
                    value={
                      generateStateValueProp($state, ["textInput3", "value"]) ??
                      ""
                    }
                  />

                  {false ? (
                    <div
                      data-plasmic-name={"assistiveText2"}
                      data-plasmic-override={overrides.assistiveText2}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.assistiveText2
                      )}
                    >
                      {"Your password is between 4 and 12 characters"}
                    </div>
                  ) : null}
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"username3"}
                  data-plasmic-override={overrides.username3}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.username3)}
                >
                  <div
                    data-plasmic-name={"inputTextLabel3"}
                    data-plasmic-override={overrides.inputTextLabel3}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.inputTextLabel3
                    )}
                  >
                    {"Email Address*"}
                  </div>
                  <TextInput
                    data-plasmic-name={"textInput4"}
                    data-plasmic-override={overrides.textInput4}
                    className={classNames("__wab_instance", sty.textInput4)}
                    name={"Email Address"}
                    onChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "textInput4",
                        "value"
                      ])((e => e.target?.value).apply(null, eventArgs));
                    }}
                    placeholder={"Enter Email address"}
                    required={true}
                    type={"email"}
                    value={
                      generateStateValueProp($state, ["textInput4", "value"]) ??
                      ""
                    }
                  />

                  {false ? (
                    <div
                      data-plasmic-name={"assistiveText3"}
                      data-plasmic-override={overrides.assistiveText3}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.assistiveText3
                      )}
                    >
                      {"Your password is between 4 and 12 characters"}
                    </div>
                  ) : null}
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"username4"}
                  data-plasmic-override={overrides.username4}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.username4)}
                >
                  <div
                    data-plasmic-name={"inputTextLabel4"}
                    data-plasmic-override={overrides.inputTextLabel4}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.inputTextLabel4
                    )}
                  >
                    {"Number of Emplyees*"}
                  </div>
                  <TextInput
                    data-plasmic-name={"textInput5"}
                    data-plasmic-override={overrides.textInput5}
                    className={classNames("__wab_instance", sty.textInput5)}
                    onChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "textInput5",
                        "value"
                      ])((e => e.target?.value).apply(null, eventArgs));
                    }}
                    placeholder={"Number of employees"}
                    required={true}
                    type={"number"}
                    value={
                      generateStateValueProp($state, ["textInput5", "value"]) ??
                      ""
                    }
                  />

                  {false ? (
                    <div
                      data-plasmic-name={"assistiveText4"}
                      data-plasmic-override={overrides.assistiveText4}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.assistiveText4
                      )}
                    >
                      {"Your password is between 4 and 12 characters"}
                    </div>
                  ) : null}
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"dropdowns"}
                  data-plasmic-override={overrides.dropdowns}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.dropdowns)}
                >
                  <div
                    data-plasmic-name={"dropdownTitle"}
                    data-plasmic-override={overrides.dropdownTitle}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.dropdownTitle
                    )}
                  >
                    {"Start Up Location*"}
                  </div>
                  <Select
                    data-plasmic-name={"select"}
                    data-plasmic-override={overrides.select}
                    className={classNames("__wab_instance", sty.select)}
                    name={"Start Up Location"}
                    onChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, ["select", "value"])(
                        eventArgs[0]
                      );
                    }}
                    options={(() => {
                      const __composite = [
                        { value: null, label: null },
                        { value: null, label: null }
                      ];

                      __composite["0"]["value"] = "Benghazi";
                      __composite["0"]["label"] = "Benghazi";
                      __composite["1"]["value"] = "Tripoli";
                      __composite["1"]["label"] = "Tripoli";
                      return __composite;
                    })()}
                    value={generateStateValueProp($state, ["select", "value"])}
                  />
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"username5"}
                  data-plasmic-override={overrides.username5}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.username5)}
                >
                  <div
                    data-plasmic-name={"inputTextLabel5"}
                    data-plasmic-override={overrides.inputTextLabel5}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.inputTextLabel5
                    )}
                  >
                    {"Link to Start Up"}
                  </div>
                  <TextInput
                    data-plasmic-name={"textInput"}
                    data-plasmic-override={overrides.textInput}
                    className={classNames("__wab_instance", sty.textInput)}
                    endIcon={null}
                    name={"Link to Start Up"}
                    onChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, ["textInput", "value"])(
                        (e => e.target?.value).apply(null, eventArgs)
                      );
                    }}
                    placeholder={"Enter URL"}
                    startIcon={null}
                    type={"text"}
                    value={
                      generateStateValueProp($state, ["textInput", "value"]) ??
                      ""
                    }
                  />

                  {false ? (
                    <div
                      data-plasmic-name={"assistiveText5"}
                      data-plasmic-override={overrides.assistiveText5}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.assistiveText5
                      )}
                    >
                      {"Your password is between 4 and 12 characters"}
                    </div>
                  ) : null}
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"dropdowns2"}
                  data-plasmic-override={overrides.dropdowns2}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.dropdowns2)}
                >
                  <div
                    data-plasmic-name={"dropdownTitle2"}
                    data-plasmic-override={overrides.dropdownTitle2}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.dropdownTitle2
                    )}
                  >
                    {"Size of Start Up (Revenue)"}
                  </div>
                  <Select
                    data-plasmic-name={"select2"}
                    data-plasmic-override={overrides.select2}
                    className={classNames("__wab_instance", sty.select2)}
                    name={"Size of Start Up (Revenue)"}
                    onChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, ["select2", "value"])(
                        eventArgs[0]
                      );
                    }}
                    options={(() => {
                      const __composite = [
                        { value: null, label: null },
                        { value: null, label: null }
                      ];

                      __composite["0"]["value"] = "1";
                      __composite["0"]["label"] = "From 100 to 150";
                      __composite["1"]["value"] = "2";
                      __composite["1"]["label"] = "From 150 to 250";
                      return __composite;
                    })()}
                    value={generateStateValueProp($state, ["select2", "value"])}
                  />
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"cta"}
                  data-plasmic-override={overrides.cta}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.cta)}
                >
                  <Button
                    data-plasmic-name={"openButton"}
                    data-plasmic-override={overrides.openButton}
                    className={classNames("__wab_instance", sty.openButton)}
                    onClick={async event => {
                      const $steps = {};
                      $steps["updateModalOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["modal", "open"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;
                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateModalOpen"] != null &&
                        typeof $steps["updateModalOpen"] === "object" &&
                        typeof $steps["updateModalOpen"].then === "function"
                      ) {
                        $steps["updateModalOpen"] = await $steps[
                          "updateModalOpen"
                        ];
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__gv7Io
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "var(--token-v6LfSbn-y)" }}
                        >
                          {"Submit"}
                        </span>
                      </React.Fragment>
                    </div>
                  </Button>
                </Stack__>
                {false ? (
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"textInputs"}
                    data-plasmic-override={overrides.textInputs}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.textInputs)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nn1Dq
                      )}
                    >
                      {"Input Text Label"}
                    </div>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"inputField8"}
                      data-plasmic-override={overrides.inputField8}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.inputField8)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"text9"}
                        data-plasmic-override={overrides.text9}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.text9)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xBPnR
                          )}
                        >
                          {"Typing |"}
                        </div>
                        <div
                          data-plasmic-name={"icon6"}
                          data-plasmic-override={overrides.icon6}
                          className={classNames(projectcss.all, sty.icon6)}
                        />
                      </Stack__>
                    </Stack__>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xJPkP
                      )}
                    >
                      {"Assistive Text"}
                    </div>
                  </Stack__>
                ) : null}
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              hasGap={true}
              className={classNames(projectcss.all, sty.footer)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"frame"}
                data-plasmic-override={overrides.frame}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"thinkCrative"}
                  data-plasmic-override={overrides.thinkCrative}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.thinkCrative)}
                >
                  <ThinkCreativeLogoIcon
                    className={classNames(projectcss.all, sty.svg__d381Z)}
                    role={"img"}
                  />

                  <div
                    data-plasmic-name={"description"}
                    data-plasmic-override={overrides.description}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.description
                    )}
                  >
                    {"Ignite Change. Think Creative."}
                  </div>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"companyDetails"}
                    data-plasmic-override={overrides.companyDetails}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.companyDetails)}
                  >
                    <CanvasLogo2Icon
                      className={classNames(projectcss.all, sty.svg__pvEs0)}
                      role={"img"}
                    />

                    <Stack__
                      as={"div"}
                      data-plasmic-name={"socialMediaContainer"}
                      data-plasmic-override={overrides.socialMediaContainer}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.socialMediaContainer
                      )}
                    >
                      <SocialMediaIconSquareFacebookIcon
                        className={classNames(projectcss.all, sty.svg__oGrj0)}
                        role={"img"}
                      />

                      <SocialMediaIconSquareInstagramIcon
                        className={classNames(projectcss.all, sty.svg__rrD2E)}
                        role={"img"}
                      />

                      <div
                        data-plasmic-name={"socialMediaIconSquareLinkedIn"}
                        data-plasmic-override={
                          overrides.socialMediaIconSquareLinkedIn
                        }
                        className={classNames(
                          projectcss.all,
                          sty.socialMediaIconSquareLinkedIn
                        )}
                      >
                        <Group73Icon
                          className={classNames(projectcss.all, sty.svg__a2A33)}
                          role={"img"}
                        />
                      </div>
                    </Stack__>
                  </Stack__>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"details"}
                  data-plasmic-override={overrides.details}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.details)}
                >
                  <AntdModal
                    data-plasmic-name={"modal"}
                    data-plasmic-override={overrides.modal}
                    className={classNames("__wab_instance", sty.modal)}
                    defaultStylesClassName={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_library_plasmic_color_type_css.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens
                    )}
                    footer={
                      <Button
                        data-plasmic-name={"button"}
                        data-plasmic-override={overrides.button}
                        className={classNames("__wab_instance", sty.button)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__uqdId
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "#887473" }}
                            >
                              {"Close"}
                            </span>
                          </React.Fragment>
                        </div>
                      </Button>
                    }
                    maskClosable={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? true
                        : true
                    }
                    modalScopeClassName={sty["modal__modal"]}
                    onOpenChange={generateStateOnChangeProp($state, [
                      "modal",
                      "open"
                    ])}
                    open={generateStateValueProp($state, ["modal", "open"])}
                    title={
                      <Frame7SvgIcon
                        className={classNames(projectcss.all, sty.svg___4QuHm)}
                        role={"img"}
                      />
                    }
                    trigger={null}
                    width={
                      hasVariant(globalVariants, "screen", "s")
                        ? "350"
                        : undefined
                    }
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__dlCuv)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__d6Iol
                        )}
                      >
                        {
                          "Registration complete!\nWe will be in touch shortly. In the meantime, please check your email. Thank you for joining Canvas!"
                        }
                      </div>
                    </div>
                  </AntdModal>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"footerColumn"}
                    data-plasmic-override={overrides.footerColumn}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.footerColumn)}
                  >
                    <div
                      data-plasmic-name={"footerTitle"}
                      data-plasmic-override={overrides.footerTitle}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.footerTitle
                      )}
                    >
                      {"About us"}
                    </div>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"footerLinks"}
                      data-plasmic-override={overrides.footerLinks}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.footerLinks)}
                    >
                      <div
                        data-plasmic-name={"link"}
                        data-plasmic-override={overrides.link}
                        className={classNames(projectcss.all, sty.link)}
                      >
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"masterLink"}
                          data-plasmic-override={overrides.masterLink}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.masterLink)}
                        >
                          {false ? (
                            <div
                              data-plasmic-name={"lineRoundedPassword"}
                              data-plasmic-override={
                                overrides.lineRoundedPassword
                              }
                              className={classNames(
                                projectcss.all,
                                sty.lineRoundedPassword
                              )}
                            >
                              <PasswordIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__h9Usj
                                )}
                                role={"img"}
                              />
                            </div>
                          ) : null}
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__hsp7V
                            )}
                          >
                            {"What is Canvas"}
                          </div>
                          {false ? (
                            <div
                              data-plasmic-name={"lineRoundedChevronDown"}
                              data-plasmic-override={
                                overrides.lineRoundedChevronDown
                              }
                              className={classNames(
                                projectcss.all,
                                sty.lineRoundedChevronDown
                              )}
                            >
                              <ChevronIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__cWcLz
                                )}
                                role={"img"}
                              />
                            </div>
                          ) : null}
                        </Stack__>
                      </div>
                    </Stack__>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"footerColumn2"}
                    data-plasmic-override={overrides.footerColumn2}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.footerColumn2)}
                  >
                    <div
                      data-plasmic-name={"footerTitle2"}
                      data-plasmic-override={overrides.footerTitle2}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.footerTitle2
                      )}
                    >
                      {"Initiative"}
                    </div>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"footerLinks2"}
                      data-plasmic-override={overrides.footerLinks2}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.footerLinks2)}
                    >
                      <div
                        data-plasmic-name={"link2"}
                        data-plasmic-override={overrides.link2}
                        className={classNames(projectcss.all, sty.link2)}
                      >
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"masterLink2"}
                          data-plasmic-override={overrides.masterLink2}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.masterLink2
                          )}
                        >
                          {false ? (
                            <div
                              data-plasmic-name={"lineRoundedPassword2"}
                              data-plasmic-override={
                                overrides.lineRoundedPassword2
                              }
                              className={classNames(
                                projectcss.all,
                                sty.lineRoundedPassword2
                              )}
                            >
                              <PasswordIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__qMzXi
                                )}
                                role={"img"}
                              />
                            </div>
                          ) : null}
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__e3D1T
                            )}
                          >
                            {"For Entrepreneurs"}
                          </div>
                          {false ? (
                            <div
                              data-plasmic-name={"lineRoundedChevronDown2"}
                              data-plasmic-override={
                                overrides.lineRoundedChevronDown2
                              }
                              className={classNames(
                                projectcss.all,
                                sty.lineRoundedChevronDown2
                              )}
                            >
                              <ChevronIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__kYtH
                                )}
                                role={"img"}
                              />
                            </div>
                          ) : null}
                        </Stack__>
                      </div>
                      <div
                        data-plasmic-name={"link3"}
                        data-plasmic-override={overrides.link3}
                        className={classNames(projectcss.all, sty.link3)}
                      >
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"masterLink3"}
                          data-plasmic-override={overrides.masterLink3}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.masterLink3
                          )}
                        >
                          {false ? (
                            <div
                              data-plasmic-name={"lineRoundedPassword3"}
                              data-plasmic-override={
                                overrides.lineRoundedPassword3
                              }
                              className={classNames(
                                projectcss.all,
                                sty.lineRoundedPassword3
                              )}
                            >
                              <PasswordIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__sgCp
                                )}
                                role={"img"}
                              />
                            </div>
                          ) : null}
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__kfEYq
                            )}
                          >
                            {"For Investores"}
                          </div>
                          {false ? (
                            <div
                              data-plasmic-name={"lineRoundedChevronDown3"}
                              data-plasmic-override={
                                overrides.lineRoundedChevronDown3
                              }
                              className={classNames(
                                projectcss.all,
                                sty.lineRoundedChevronDown3
                              )}
                            >
                              <ChevronIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__tfPtw
                                )}
                                role={"img"}
                              />
                            </div>
                          ) : null}
                        </Stack__>
                      </div>
                    </Stack__>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame39468"}
                    data-plasmic-override={overrides.frame39468}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame39468)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"footerColumn3"}
                      data-plasmic-override={overrides.footerColumn3}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.footerColumn3)}
                    >
                      <div
                        data-plasmic-name={"footerTitle3"}
                        data-plasmic-override={overrides.footerTitle3}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.footerTitle3
                        )}
                      >
                        {"Contacts us"}
                      </div>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"frame39467"}
                      data-plasmic-override={overrides.frame39467}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame39467)}
                    >
                      <div
                        data-plasmic-name={"link4"}
                        data-plasmic-override={overrides.link4}
                        className={classNames(projectcss.all, sty.link4)}
                      >
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"masterLink4"}
                          data-plasmic-override={overrides.masterLink4}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.masterLink4
                          )}
                        >
                          <div
                            data-plasmic-name={"lineRoundedEmail"}
                            data-plasmic-override={overrides.lineRoundedEmail}
                            className={classNames(
                              projectcss.all,
                              sty.lineRoundedEmail
                            )}
                          >
                            <EmailIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__zSd7O
                              )}
                              role={"img"}
                            />
                          </div>
                          <div
                            data-plasmic-name={"linkItem"}
                            data-plasmic-override={overrides.linkItem}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.linkItem
                            )}
                          >
                            {"contact@company.com"}
                          </div>
                          {false ? (
                            <div
                              data-plasmic-name={"lineRoundedChevronDown4"}
                              data-plasmic-override={
                                overrides.lineRoundedChevronDown4
                              }
                              className={classNames(
                                projectcss.all,
                                sty.lineRoundedChevronDown4
                              )}
                            >
                              <ChevronIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__buWqF
                                )}
                                role={"img"}
                              />
                            </div>
                          ) : null}
                        </Stack__>
                      </div>
                      <div
                        data-plasmic-name={"link5"}
                        data-plasmic-override={overrides.link5}
                        className={classNames(projectcss.all, sty.link5)}
                      >
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"masterLink5"}
                          data-plasmic-override={overrides.masterLink5}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.masterLink5
                          )}
                        >
                          <div
                            data-plasmic-name={"lineRoundedPhone"}
                            data-plasmic-override={overrides.lineRoundedPhone}
                            className={classNames(
                              projectcss.all,
                              sty.lineRoundedPhone
                            )}
                          >
                            <PhoneIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__qmynw
                              )}
                              role={"img"}
                            />
                          </div>
                          <div
                            data-plasmic-name={"linkItem2"}
                            data-plasmic-override={overrides.linkItem2}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.linkItem2
                            )}
                          >
                            {"(000) 000 - 0000"}
                          </div>
                          {false ? (
                            <div
                              data-plasmic-name={"lineRoundedChevronDown5"}
                              data-plasmic-override={
                                overrides.lineRoundedChevronDown5
                              }
                              className={classNames(
                                projectcss.all,
                                sty.lineRoundedChevronDown5
                              )}
                            >
                              <ChevronIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__a2F
                                )}
                                role={"img"}
                              />
                            </div>
                          ) : null}
                        </Stack__>
                      </div>
                      <div
                        data-plasmic-name={"group39465"}
                        data-plasmic-override={overrides.group39465}
                        className={classNames(projectcss.all, sty.group39465)}
                      >
                        <div
                          data-plasmic-name={"spacerIconWrapper"}
                          data-plasmic-override={overrides.spacerIconWrapper}
                          className={classNames(
                            projectcss.all,
                            sty.spacerIconWrapper
                          )}
                        >
                          <div
                            data-plasmic-name={"lineRoundedMark"}
                            data-plasmic-override={overrides.lineRoundedMark}
                            className={classNames(
                              projectcss.all,
                              sty.lineRoundedMark
                            )}
                          >
                            <MarkIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__dp8Ee
                              )}
                              role={"img"}
                            />
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"footerDescription"}
                          data-plasmic-override={overrides.footerDescription}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.footerDescription
                          )}
                        >
                          {"Lorem Lorem Lorem "}
                        </div>
                      </div>
                    </Stack__>
                  </Stack__>
                </Stack__>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"footerContent"}
                data-plasmic-override={overrides.footerContent}
                hasGap={true}
                className={classNames(projectcss.all, sty.footerContent)}
              >
                <div
                  data-plasmic-name={"footerContent2"}
                  data-plasmic-override={overrides.footerContent2}
                  className={classNames(projectcss.all, sty.footerContent2)}
                >
                  <div
                    data-plasmic-name={"footerLeft"}
                    data-plasmic-override={overrides.footerLeft}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.footerLeft
                    )}
                  >
                    {"Copyright \u00a9 2024 Think Creative"}
                  </div>
                  <div
                    data-plasmic-name={"footerRight"}
                    data-plasmic-override={overrides.footerRight}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.footerRight
                    )}
                  >
                    {"All Rights Reserved"}
                  </div>
                </div>
              </Stack__>
            </Stack__>
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "enterpreneursPage",
    "navElements",
    "img",
    "pageContent",
    "frame39517",
    "frame39518",
    "frame39531",
    "text",
    "frame39513",
    "frame39510",
    "tPrivateSector",
    "increaseTheNumberOfStartups",
    "frame39511",
    "tPrivateSector2",
    "increaseTheNumberOfStartups2",
    "frame39512",
    "tPrivateSector3",
    "increaseTheNumberOfStartups3",
    "frame39508",
    "tPrivateSector4",
    "increaseTheNumberOfStartups4",
    "frame39538",
    "frame39536",
    "frame39529",
    "form",
    "username",
    "inputTextLabel",
    "textInput2",
    "assistiveText",
    "username2",
    "inputTextLabel2",
    "textInput3",
    "assistiveText2",
    "username3",
    "inputTextLabel3",
    "textInput4",
    "assistiveText3",
    "username4",
    "inputTextLabel4",
    "textInput5",
    "assistiveText4",
    "dropdowns",
    "dropdownTitle",
    "select",
    "username5",
    "inputTextLabel5",
    "textInput",
    "assistiveText5",
    "dropdowns2",
    "dropdownTitle2",
    "select2",
    "cta",
    "openButton",
    "textInputs",
    "inputField8",
    "text9",
    "icon6",
    "footer",
    "frame",
    "thinkCrative",
    "description",
    "companyDetails",
    "socialMediaContainer",
    "socialMediaIconSquareLinkedIn",
    "details",
    "modal",
    "button",
    "footerColumn",
    "footerTitle",
    "footerLinks",
    "link",
    "masterLink",
    "lineRoundedPassword",
    "lineRoundedChevronDown",
    "footerColumn2",
    "footerTitle2",
    "footerLinks2",
    "link2",
    "masterLink2",
    "lineRoundedPassword2",
    "lineRoundedChevronDown2",
    "link3",
    "masterLink3",
    "lineRoundedPassword3",
    "lineRoundedChevronDown3",
    "frame39468",
    "footerColumn3",
    "footerTitle3",
    "frame39467",
    "link4",
    "masterLink4",
    "lineRoundedEmail",
    "linkItem",
    "lineRoundedChevronDown4",
    "link5",
    "masterLink5",
    "lineRoundedPhone",
    "linkItem2",
    "lineRoundedChevronDown5",
    "group39465",
    "spacerIconWrapper",
    "lineRoundedMark",
    "footerDescription",
    "footerContent",
    "footerContent2",
    "footerLeft",
    "footerRight"
  ],

  enterpreneursPage: [
    "enterpreneursPage",
    "navElements",
    "img",
    "pageContent",
    "frame39517",
    "frame39518",
    "frame39531",
    "text",
    "frame39513",
    "frame39510",
    "tPrivateSector",
    "increaseTheNumberOfStartups",
    "frame39511",
    "tPrivateSector2",
    "increaseTheNumberOfStartups2",
    "frame39512",
    "tPrivateSector3",
    "increaseTheNumberOfStartups3",
    "frame39508",
    "tPrivateSector4",
    "increaseTheNumberOfStartups4",
    "frame39538",
    "frame39536",
    "frame39529",
    "form",
    "username",
    "inputTextLabel",
    "textInput2",
    "assistiveText",
    "username2",
    "inputTextLabel2",
    "textInput3",
    "assistiveText2",
    "username3",
    "inputTextLabel3",
    "textInput4",
    "assistiveText3",
    "username4",
    "inputTextLabel4",
    "textInput5",
    "assistiveText4",
    "dropdowns",
    "dropdownTitle",
    "select",
    "username5",
    "inputTextLabel5",
    "textInput",
    "assistiveText5",
    "dropdowns2",
    "dropdownTitle2",
    "select2",
    "cta",
    "openButton",
    "textInputs",
    "inputField8",
    "text9",
    "icon6",
    "footer",
    "frame",
    "thinkCrative",
    "description",
    "companyDetails",
    "socialMediaContainer",
    "socialMediaIconSquareLinkedIn",
    "details",
    "modal",
    "button",
    "footerColumn",
    "footerTitle",
    "footerLinks",
    "link",
    "masterLink",
    "lineRoundedPassword",
    "lineRoundedChevronDown",
    "footerColumn2",
    "footerTitle2",
    "footerLinks2",
    "link2",
    "masterLink2",
    "lineRoundedPassword2",
    "lineRoundedChevronDown2",
    "link3",
    "masterLink3",
    "lineRoundedPassword3",
    "lineRoundedChevronDown3",
    "frame39468",
    "footerColumn3",
    "footerTitle3",
    "frame39467",
    "link4",
    "masterLink4",
    "lineRoundedEmail",
    "linkItem",
    "lineRoundedChevronDown4",
    "link5",
    "masterLink5",
    "lineRoundedPhone",
    "linkItem2",
    "lineRoundedChevronDown5",
    "group39465",
    "spacerIconWrapper",
    "lineRoundedMark",
    "footerDescription",
    "footerContent",
    "footerContent2",
    "footerLeft",
    "footerRight"
  ],

  navElements: ["navElements", "img", "pageContent"],
  img: ["img"],
  pageContent: ["pageContent"],
  frame39517: ["frame39517", "frame39518", "frame39531", "text"],
  frame39518: ["frame39518", "frame39531", "text"],
  frame39531: ["frame39531", "text"],
  text: ["text"],
  frame39513: [
    "frame39513",
    "frame39510",
    "tPrivateSector",
    "increaseTheNumberOfStartups",
    "frame39511",
    "tPrivateSector2",
    "increaseTheNumberOfStartups2",
    "frame39512",
    "tPrivateSector3",
    "increaseTheNumberOfStartups3",
    "frame39508",
    "tPrivateSector4",
    "increaseTheNumberOfStartups4"
  ],

  frame39510: ["frame39510", "tPrivateSector", "increaseTheNumberOfStartups"],
  tPrivateSector: ["tPrivateSector"],
  increaseTheNumberOfStartups: ["increaseTheNumberOfStartups"],
  frame39511: ["frame39511", "tPrivateSector2", "increaseTheNumberOfStartups2"],
  tPrivateSector2: ["tPrivateSector2"],
  increaseTheNumberOfStartups2: ["increaseTheNumberOfStartups2"],
  frame39512: ["frame39512", "tPrivateSector3", "increaseTheNumberOfStartups3"],
  tPrivateSector3: ["tPrivateSector3"],
  increaseTheNumberOfStartups3: ["increaseTheNumberOfStartups3"],
  frame39508: ["frame39508", "tPrivateSector4", "increaseTheNumberOfStartups4"],
  tPrivateSector4: ["tPrivateSector4"],
  increaseTheNumberOfStartups4: ["increaseTheNumberOfStartups4"],
  frame39538: ["frame39538", "frame39536"],
  frame39536: ["frame39536"],
  frame39529: [
    "frame39529",
    "form",
    "username",
    "inputTextLabel",
    "textInput2",
    "assistiveText",
    "username2",
    "inputTextLabel2",
    "textInput3",
    "assistiveText2",
    "username3",
    "inputTextLabel3",
    "textInput4",
    "assistiveText3",
    "username4",
    "inputTextLabel4",
    "textInput5",
    "assistiveText4",
    "dropdowns",
    "dropdownTitle",
    "select",
    "username5",
    "inputTextLabel5",
    "textInput",
    "assistiveText5",
    "dropdowns2",
    "dropdownTitle2",
    "select2",
    "cta",
    "openButton",
    "textInputs",
    "inputField8",
    "text9",
    "icon6"
  ],

  form: [
    "form",
    "username",
    "inputTextLabel",
    "textInput2",
    "assistiveText",
    "username2",
    "inputTextLabel2",
    "textInput3",
    "assistiveText2",
    "username3",
    "inputTextLabel3",
    "textInput4",
    "assistiveText3",
    "username4",
    "inputTextLabel4",
    "textInput5",
    "assistiveText4",
    "dropdowns",
    "dropdownTitle",
    "select",
    "username5",
    "inputTextLabel5",
    "textInput",
    "assistiveText5",
    "dropdowns2",
    "dropdownTitle2",
    "select2",
    "cta",
    "openButton",
    "textInputs",
    "inputField8",
    "text9",
    "icon6"
  ],

  username: ["username", "inputTextLabel", "textInput2", "assistiveText"],
  inputTextLabel: ["inputTextLabel"],
  textInput2: ["textInput2"],
  assistiveText: ["assistiveText"],
  username2: ["username2", "inputTextLabel2", "textInput3", "assistiveText2"],
  inputTextLabel2: ["inputTextLabel2"],
  textInput3: ["textInput3"],
  assistiveText2: ["assistiveText2"],
  username3: ["username3", "inputTextLabel3", "textInput4", "assistiveText3"],
  inputTextLabel3: ["inputTextLabel3"],
  textInput4: ["textInput4"],
  assistiveText3: ["assistiveText3"],
  username4: ["username4", "inputTextLabel4", "textInput5", "assistiveText4"],
  inputTextLabel4: ["inputTextLabel4"],
  textInput5: ["textInput5"],
  assistiveText4: ["assistiveText4"],
  dropdowns: ["dropdowns", "dropdownTitle", "select"],
  dropdownTitle: ["dropdownTitle"],
  select: ["select"],
  username5: ["username5", "inputTextLabel5", "textInput", "assistiveText5"],
  inputTextLabel5: ["inputTextLabel5"],
  textInput: ["textInput"],
  assistiveText5: ["assistiveText5"],
  dropdowns2: ["dropdowns2", "dropdownTitle2", "select2"],
  dropdownTitle2: ["dropdownTitle2"],
  select2: ["select2"],
  cta: ["cta", "openButton"],
  openButton: ["openButton"],
  textInputs: ["textInputs", "inputField8", "text9", "icon6"],
  inputField8: ["inputField8", "text9", "icon6"],
  text9: ["text9", "icon6"],
  icon6: ["icon6"],
  footer: [
    "footer",
    "frame",
    "thinkCrative",
    "description",
    "companyDetails",
    "socialMediaContainer",
    "socialMediaIconSquareLinkedIn",
    "details",
    "modal",
    "button",
    "footerColumn",
    "footerTitle",
    "footerLinks",
    "link",
    "masterLink",
    "lineRoundedPassword",
    "lineRoundedChevronDown",
    "footerColumn2",
    "footerTitle2",
    "footerLinks2",
    "link2",
    "masterLink2",
    "lineRoundedPassword2",
    "lineRoundedChevronDown2",
    "link3",
    "masterLink3",
    "lineRoundedPassword3",
    "lineRoundedChevronDown3",
    "frame39468",
    "footerColumn3",
    "footerTitle3",
    "frame39467",
    "link4",
    "masterLink4",
    "lineRoundedEmail",
    "linkItem",
    "lineRoundedChevronDown4",
    "link5",
    "masterLink5",
    "lineRoundedPhone",
    "linkItem2",
    "lineRoundedChevronDown5",
    "group39465",
    "spacerIconWrapper",
    "lineRoundedMark",
    "footerDescription",
    "footerContent",
    "footerContent2",
    "footerLeft",
    "footerRight"
  ],

  frame: [
    "frame",
    "thinkCrative",
    "description",
    "companyDetails",
    "socialMediaContainer",
    "socialMediaIconSquareLinkedIn",
    "details",
    "modal",
    "button",
    "footerColumn",
    "footerTitle",
    "footerLinks",
    "link",
    "masterLink",
    "lineRoundedPassword",
    "lineRoundedChevronDown",
    "footerColumn2",
    "footerTitle2",
    "footerLinks2",
    "link2",
    "masterLink2",
    "lineRoundedPassword2",
    "lineRoundedChevronDown2",
    "link3",
    "masterLink3",
    "lineRoundedPassword3",
    "lineRoundedChevronDown3",
    "frame39468",
    "footerColumn3",
    "footerTitle3",
    "frame39467",
    "link4",
    "masterLink4",
    "lineRoundedEmail",
    "linkItem",
    "lineRoundedChevronDown4",
    "link5",
    "masterLink5",
    "lineRoundedPhone",
    "linkItem2",
    "lineRoundedChevronDown5",
    "group39465",
    "spacerIconWrapper",
    "lineRoundedMark",
    "footerDescription"
  ],

  thinkCrative: [
    "thinkCrative",
    "description",
    "companyDetails",
    "socialMediaContainer",
    "socialMediaIconSquareLinkedIn"
  ],

  description: ["description"],
  companyDetails: [
    "companyDetails",
    "socialMediaContainer",
    "socialMediaIconSquareLinkedIn"
  ],

  socialMediaContainer: [
    "socialMediaContainer",
    "socialMediaIconSquareLinkedIn"
  ],

  socialMediaIconSquareLinkedIn: ["socialMediaIconSquareLinkedIn"],
  details: [
    "details",
    "modal",
    "button",
    "footerColumn",
    "footerTitle",
    "footerLinks",
    "link",
    "masterLink",
    "lineRoundedPassword",
    "lineRoundedChevronDown",
    "footerColumn2",
    "footerTitle2",
    "footerLinks2",
    "link2",
    "masterLink2",
    "lineRoundedPassword2",
    "lineRoundedChevronDown2",
    "link3",
    "masterLink3",
    "lineRoundedPassword3",
    "lineRoundedChevronDown3",
    "frame39468",
    "footerColumn3",
    "footerTitle3",
    "frame39467",
    "link4",
    "masterLink4",
    "lineRoundedEmail",
    "linkItem",
    "lineRoundedChevronDown4",
    "link5",
    "masterLink5",
    "lineRoundedPhone",
    "linkItem2",
    "lineRoundedChevronDown5",
    "group39465",
    "spacerIconWrapper",
    "lineRoundedMark",
    "footerDescription"
  ],

  modal: ["modal", "button"],
  button: ["button"],
  footerColumn: [
    "footerColumn",
    "footerTitle",
    "footerLinks",
    "link",
    "masterLink",
    "lineRoundedPassword",
    "lineRoundedChevronDown"
  ],

  footerTitle: ["footerTitle"],
  footerLinks: [
    "footerLinks",
    "link",
    "masterLink",
    "lineRoundedPassword",
    "lineRoundedChevronDown"
  ],

  link: ["link", "masterLink", "lineRoundedPassword", "lineRoundedChevronDown"],
  masterLink: ["masterLink", "lineRoundedPassword", "lineRoundedChevronDown"],
  lineRoundedPassword: ["lineRoundedPassword"],
  lineRoundedChevronDown: ["lineRoundedChevronDown"],
  footerColumn2: [
    "footerColumn2",
    "footerTitle2",
    "footerLinks2",
    "link2",
    "masterLink2",
    "lineRoundedPassword2",
    "lineRoundedChevronDown2",
    "link3",
    "masterLink3",
    "lineRoundedPassword3",
    "lineRoundedChevronDown3"
  ],

  footerTitle2: ["footerTitle2"],
  footerLinks2: [
    "footerLinks2",
    "link2",
    "masterLink2",
    "lineRoundedPassword2",
    "lineRoundedChevronDown2",
    "link3",
    "masterLink3",
    "lineRoundedPassword3",
    "lineRoundedChevronDown3"
  ],

  link2: [
    "link2",
    "masterLink2",
    "lineRoundedPassword2",
    "lineRoundedChevronDown2"
  ],

  masterLink2: [
    "masterLink2",
    "lineRoundedPassword2",
    "lineRoundedChevronDown2"
  ],

  lineRoundedPassword2: ["lineRoundedPassword2"],
  lineRoundedChevronDown2: ["lineRoundedChevronDown2"],
  link3: [
    "link3",
    "masterLink3",
    "lineRoundedPassword3",
    "lineRoundedChevronDown3"
  ],

  masterLink3: [
    "masterLink3",
    "lineRoundedPassword3",
    "lineRoundedChevronDown3"
  ],

  lineRoundedPassword3: ["lineRoundedPassword3"],
  lineRoundedChevronDown3: ["lineRoundedChevronDown3"],
  frame39468: [
    "frame39468",
    "footerColumn3",
    "footerTitle3",
    "frame39467",
    "link4",
    "masterLink4",
    "lineRoundedEmail",
    "linkItem",
    "lineRoundedChevronDown4",
    "link5",
    "masterLink5",
    "lineRoundedPhone",
    "linkItem2",
    "lineRoundedChevronDown5",
    "group39465",
    "spacerIconWrapper",
    "lineRoundedMark",
    "footerDescription"
  ],

  footerColumn3: ["footerColumn3", "footerTitle3"],
  footerTitle3: ["footerTitle3"],
  frame39467: [
    "frame39467",
    "link4",
    "masterLink4",
    "lineRoundedEmail",
    "linkItem",
    "lineRoundedChevronDown4",
    "link5",
    "masterLink5",
    "lineRoundedPhone",
    "linkItem2",
    "lineRoundedChevronDown5",
    "group39465",
    "spacerIconWrapper",
    "lineRoundedMark",
    "footerDescription"
  ],

  link4: [
    "link4",
    "masterLink4",
    "lineRoundedEmail",
    "linkItem",
    "lineRoundedChevronDown4"
  ],

  masterLink4: [
    "masterLink4",
    "lineRoundedEmail",
    "linkItem",
    "lineRoundedChevronDown4"
  ],

  lineRoundedEmail: ["lineRoundedEmail"],
  linkItem: ["linkItem"],
  lineRoundedChevronDown4: ["lineRoundedChevronDown4"],
  link5: [
    "link5",
    "masterLink5",
    "lineRoundedPhone",
    "linkItem2",
    "lineRoundedChevronDown5"
  ],

  masterLink5: [
    "masterLink5",
    "lineRoundedPhone",
    "linkItem2",
    "lineRoundedChevronDown5"
  ],

  lineRoundedPhone: ["lineRoundedPhone"],
  linkItem2: ["linkItem2"],
  lineRoundedChevronDown5: ["lineRoundedChevronDown5"],
  group39465: [
    "group39465",
    "spacerIconWrapper",
    "lineRoundedMark",
    "footerDescription"
  ],

  spacerIconWrapper: ["spacerIconWrapper", "lineRoundedMark"],
  lineRoundedMark: ["lineRoundedMark"],
  footerDescription: ["footerDescription"],
  footerContent: [
    "footerContent",
    "footerContent2",
    "footerLeft",
    "footerRight"
  ],

  footerContent2: ["footerContent2", "footerLeft", "footerRight"],
  footerLeft: ["footerLeft"],
  footerRight: ["footerRight"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCanvasEnterpreneursEn__ArgProps,
          internalVariantPropNames: PlasmicCanvasEnterpreneursEn__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCanvasEnterpreneursEn__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCanvasEnterpreneursEn";
  } else {
    func.displayName = `PlasmicCanvasEnterpreneursEn.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth(WrappedComponent) {
  const WithUsePlasmicAuthComponent = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "bWHFFGzvmXLfYr1WgyzKPi"
    });
    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicCanvasEnterpreneursEn = Object.assign(
  // Top-level PlasmicCanvasEnterpreneursEn renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    enterpreneursPage: makeNodeComponent("enterpreneursPage"),
    navElements: makeNodeComponent("navElements"),
    img: makeNodeComponent("img"),
    pageContent: makeNodeComponent("pageContent"),
    frame39517: makeNodeComponent("frame39517"),
    frame39518: makeNodeComponent("frame39518"),
    frame39531: makeNodeComponent("frame39531"),
    text: makeNodeComponent("text"),
    frame39513: makeNodeComponent("frame39513"),
    frame39510: makeNodeComponent("frame39510"),
    tPrivateSector: makeNodeComponent("tPrivateSector"),
    increaseTheNumberOfStartups: makeNodeComponent(
      "increaseTheNumberOfStartups"
    ),
    frame39511: makeNodeComponent("frame39511"),
    tPrivateSector2: makeNodeComponent("tPrivateSector2"),
    increaseTheNumberOfStartups2: makeNodeComponent(
      "increaseTheNumberOfStartups2"
    ),
    frame39512: makeNodeComponent("frame39512"),
    tPrivateSector3: makeNodeComponent("tPrivateSector3"),
    increaseTheNumberOfStartups3: makeNodeComponent(
      "increaseTheNumberOfStartups3"
    ),
    frame39508: makeNodeComponent("frame39508"),
    tPrivateSector4: makeNodeComponent("tPrivateSector4"),
    increaseTheNumberOfStartups4: makeNodeComponent(
      "increaseTheNumberOfStartups4"
    ),
    frame39538: makeNodeComponent("frame39538"),
    frame39536: makeNodeComponent("frame39536"),
    frame39529: makeNodeComponent("frame39529"),
    form: makeNodeComponent("form"),
    username: makeNodeComponent("username"),
    inputTextLabel: makeNodeComponent("inputTextLabel"),
    textInput2: makeNodeComponent("textInput2"),
    assistiveText: makeNodeComponent("assistiveText"),
    username2: makeNodeComponent("username2"),
    inputTextLabel2: makeNodeComponent("inputTextLabel2"),
    textInput3: makeNodeComponent("textInput3"),
    assistiveText2: makeNodeComponent("assistiveText2"),
    username3: makeNodeComponent("username3"),
    inputTextLabel3: makeNodeComponent("inputTextLabel3"),
    textInput4: makeNodeComponent("textInput4"),
    assistiveText3: makeNodeComponent("assistiveText3"),
    username4: makeNodeComponent("username4"),
    inputTextLabel4: makeNodeComponent("inputTextLabel4"),
    textInput5: makeNodeComponent("textInput5"),
    assistiveText4: makeNodeComponent("assistiveText4"),
    dropdowns: makeNodeComponent("dropdowns"),
    dropdownTitle: makeNodeComponent("dropdownTitle"),
    select: makeNodeComponent("select"),
    username5: makeNodeComponent("username5"),
    inputTextLabel5: makeNodeComponent("inputTextLabel5"),
    textInput: makeNodeComponent("textInput"),
    assistiveText5: makeNodeComponent("assistiveText5"),
    dropdowns2: makeNodeComponent("dropdowns2"),
    dropdownTitle2: makeNodeComponent("dropdownTitle2"),
    select2: makeNodeComponent("select2"),
    cta: makeNodeComponent("cta"),
    openButton: makeNodeComponent("openButton"),
    textInputs: makeNodeComponent("textInputs"),
    inputField8: makeNodeComponent("inputField8"),
    text9: makeNodeComponent("text9"),
    icon6: makeNodeComponent("icon6"),
    footer: makeNodeComponent("footer"),
    frame: makeNodeComponent("frame"),
    thinkCrative: makeNodeComponent("thinkCrative"),
    description: makeNodeComponent("description"),
    companyDetails: makeNodeComponent("companyDetails"),
    socialMediaContainer: makeNodeComponent("socialMediaContainer"),
    socialMediaIconSquareLinkedIn: makeNodeComponent(
      "socialMediaIconSquareLinkedIn"
    ),
    details: makeNodeComponent("details"),
    modal: makeNodeComponent("modal"),
    button: makeNodeComponent("button"),
    footerColumn: makeNodeComponent("footerColumn"),
    footerTitle: makeNodeComponent("footerTitle"),
    footerLinks: makeNodeComponent("footerLinks"),
    link: makeNodeComponent("link"),
    masterLink: makeNodeComponent("masterLink"),
    lineRoundedPassword: makeNodeComponent("lineRoundedPassword"),
    lineRoundedChevronDown: makeNodeComponent("lineRoundedChevronDown"),
    footerColumn2: makeNodeComponent("footerColumn2"),
    footerTitle2: makeNodeComponent("footerTitle2"),
    footerLinks2: makeNodeComponent("footerLinks2"),
    link2: makeNodeComponent("link2"),
    masterLink2: makeNodeComponent("masterLink2"),
    lineRoundedPassword2: makeNodeComponent("lineRoundedPassword2"),
    lineRoundedChevronDown2: makeNodeComponent("lineRoundedChevronDown2"),
    link3: makeNodeComponent("link3"),
    masterLink3: makeNodeComponent("masterLink3"),
    lineRoundedPassword3: makeNodeComponent("lineRoundedPassword3"),
    lineRoundedChevronDown3: makeNodeComponent("lineRoundedChevronDown3"),
    frame39468: makeNodeComponent("frame39468"),
    footerColumn3: makeNodeComponent("footerColumn3"),
    footerTitle3: makeNodeComponent("footerTitle3"),
    frame39467: makeNodeComponent("frame39467"),
    link4: makeNodeComponent("link4"),
    masterLink4: makeNodeComponent("masterLink4"),
    lineRoundedEmail: makeNodeComponent("lineRoundedEmail"),
    linkItem: makeNodeComponent("linkItem"),
    lineRoundedChevronDown4: makeNodeComponent("lineRoundedChevronDown4"),
    link5: makeNodeComponent("link5"),
    masterLink5: makeNodeComponent("masterLink5"),
    lineRoundedPhone: makeNodeComponent("lineRoundedPhone"),
    linkItem2: makeNodeComponent("linkItem2"),
    lineRoundedChevronDown5: makeNodeComponent("lineRoundedChevronDown5"),
    group39465: makeNodeComponent("group39465"),
    spacerIconWrapper: makeNodeComponent("spacerIconWrapper"),
    lineRoundedMark: makeNodeComponent("lineRoundedMark"),
    footerDescription: makeNodeComponent("footerDescription"),
    footerContent: makeNodeComponent("footerContent"),
    footerContent2: makeNodeComponent("footerContent2"),
    footerLeft: makeNodeComponent("footerLeft"),
    footerRight: makeNodeComponent("footerRight"),
    // Metadata about props expected for PlasmicCanvasEnterpreneursEn
    internalVariantProps: PlasmicCanvasEnterpreneursEn__VariantProps,
    internalArgProps: PlasmicCanvasEnterpreneursEn__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicCanvasEnterpreneursEn;
/* prettier-ignore-end */
