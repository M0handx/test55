// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bWHFFGzvmXLfYr1WgyzKPi
// Component: kxM55X0plcTw
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import {
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  useCurrentUser
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import Button from "../../Button"; // plasmic-import: WHYlEpdhrnG1/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: bWHFFGzvmXLfYr1WgyzKPi/projectcss
import sty from "./PlasmicCanvasEnterpreneursAr.module.css"; // plasmic-import: kxM55X0plcTw/css
import ArrowDownwardIcon from "./icons/PlasmicIcon__ArrowDownward"; // plasmic-import: qhP130KMjlRV/icon
import Line9Icon from "./icons/PlasmicIcon__Line9"; // plasmic-import: WsSQlShxK_dS/icon
import ThinkCreativeLogoIcon from "./icons/PlasmicIcon__ThinkCreativeLogo"; // plasmic-import: bRFBfvw10uJX/icon
import CanvasLogo2Icon from "./icons/PlasmicIcon__CanvasLogo2"; // plasmic-import: jh8JB6cVEVx9/icon
import SocialMediaIconSquareFacebookIcon from "./icons/PlasmicIcon__SocialMediaIconSquareFacebook"; // plasmic-import: yLUXlrvbsZoG/icon
import SocialMediaIconSquareInstagramIcon from "./icons/PlasmicIcon__SocialMediaIconSquareInstagram"; // plasmic-import: gI4BGKbWorHa/icon
import Group73Icon from "./icons/PlasmicIcon__Group73"; // plasmic-import: HL7-S_wJ6XKa/icon
import PasswordIcon from "./icons/PlasmicIcon__Password"; // plasmic-import: we1OhbWb0rjR/icon
import ChevronIcon from "./icons/PlasmicIcon__Chevron"; // plasmic-import: qBE-9ZVs4cGw/icon
import EmailIcon from "./icons/PlasmicIcon__Email"; // plasmic-import: dL42h3bLaL0H/icon
import PhoneIcon from "./icons/PlasmicIcon__Phone"; // plasmic-import: fqQ65QTeXy9p/icon
import MarkIcon from "./icons/PlasmicIcon__Mark"; // plasmic-import: vNr_0fp69FPw/icon

createPlasmicElementProxy;

export const PlasmicCanvasEnterpreneursAr__VariantProps = new Array();

export const PlasmicCanvasEnterpreneursAr__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCanvasEnterpreneursAr__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_library_plasmic_color_type_css.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"enterpreneursPage"}
            data-plasmic-override={overrides.enterpreneursPage}
            className={classNames(projectcss.all, sty.enterpreneursPage)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"navElements"}
              data-plasmic-override={overrides.navElements}
              hasGap={true}
              className={classNames(projectcss.all, sty.navElements)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ir3Am
                )}
              >
                {"EN"}
              </div>
              <Stack__
                as={"div"}
                data-plasmic-name={"pageContent"}
                data-plasmic-override={overrides.pageContent}
                hasGap={true}
                className={classNames(projectcss.all, sty.pageContent)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__oRhrn
                  )}
                >
                  {"Initiatives"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qz8Pu
                  )}
                >
                  {"About"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cnBpC
                  )}
                >
                  {"Contact us"}
                </div>
              </Stack__>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__weKgg)}
                displayHeight={"50px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"48px"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/copy_of_website_think_creative/images/canvas5.svg",
                  fullWidth: 48,
                  fullHeight: 50,
                  aspectRatio: 0.96
                }}
              />
            </Stack__>
            <div
              data-plasmic-name={"frame39517"}
              data-plasmic-override={overrides.frame39517}
              className={classNames(projectcss.all, sty.frame39517)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"frame39518"}
                data-plasmic-override={overrides.frame39518}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame39518)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zF3Id
                  )}
                >
                  {"Canvas for Entrepreneurs"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rwInM
                  )}
                >
                  {
                    "Are you seeking to get a project off the ground or grow into the  next stage? \nHere\u2019s how Canvas can help."
                  }
                </div>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"frame39531"}
                  data-plasmic-override={overrides.frame39531}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame39531)}
                >
                  <div
                    data-plasmic-name={"text"}
                    data-plasmic-override={overrides.text}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text
                    )}
                  >
                    {"Get Started"}
                  </div>
                  <ArrowDownwardIcon
                    className={classNames(projectcss.all, sty.svg__vN4Zs)}
                    role={"img"}
                  />
                </Stack__>
              </Stack__>
            </div>
            <Stack__
              as={"div"}
              data-plasmic-name={"frame39513"}
              data-plasmic-override={overrides.frame39513}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame39513)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"frame39510"}
                data-plasmic-override={overrides.frame39510}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame39510)}
              >
                <div
                  data-plasmic-name={"tPrivateSector"}
                  data-plasmic-override={overrides.tPrivateSector}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.tPrivateSector
                  )}
                >
                  {"Funding Opportunities"}
                </div>
                <div
                  data-plasmic-name={"increaseTheNumberOfStartups"}
                  data-plasmic-override={overrides.increaseTheNumberOfStartups}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.increaseTheNumberOfStartups
                  )}
                >
                  {
                    " Connect with investors tailored to \nyour startup's needs."
                  }
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"frame39511"}
                data-plasmic-override={overrides.frame39511}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame39511)}
              >
                <div
                  data-plasmic-name={"tPrivateSector2"}
                  data-plasmic-override={overrides.tPrivateSector2}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.tPrivateSector2
                  )}
                >
                  {"Mentorship Programs"}
                </div>
                <div
                  data-plasmic-name={"increaseTheNumberOfStartups2"}
                  data-plasmic-override={overrides.increaseTheNumberOfStartups2}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.increaseTheNumberOfStartups2
                  )}
                >
                  {
                    "Get support from seasoned mentors who can help you overcome challenges and make better progress."
                  }
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"frame39512"}
                data-plasmic-override={overrides.frame39512}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame39512)}
              >
                <div
                  data-plasmic-name={"tPrivateSector3"}
                  data-plasmic-override={overrides.tPrivateSector3}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.tPrivateSector3
                  )}
                >
                  {"Networking Opportunities"}
                </div>
                <div
                  data-plasmic-name={"increaseTheNumberOfStartups3"}
                  data-plasmic-override={overrides.increaseTheNumberOfStartups3}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.increaseTheNumberOfStartups3
                  )}
                >
                  {
                    "Join a community of like-minded entrepreneurs to share experiences and learn from one another."
                  }
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"frame39508"}
                data-plasmic-override={overrides.frame39508}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame39508)}
              >
                <div
                  data-plasmic-name={"tPrivateSector4"}
                  data-plasmic-override={overrides.tPrivateSector4}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.tPrivateSector4
                  )}
                >
                  {"Workshops and Resources"}
                </div>
                <div
                  data-plasmic-name={"increaseTheNumberOfStartups4"}
                  data-plasmic-override={overrides.increaseTheNumberOfStartups4}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.increaseTheNumberOfStartups4
                  )}
                >
                  {
                    "Participate in workshops to develop your skills in pitching, business development, and investment strategies."
                  }
                </div>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"frame39538"}
              data-plasmic-override={overrides.frame39538}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame39538)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"frame39536"}
                data-plasmic-override={overrides.frame39536}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame39536)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dEmm3
                  )}
                >
                  {"\u0633\u0648\u0641 \u0646\u0639\u0637\u064a\u0643.."}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xfBc8
                  )}
                >
                  {
                    "Are you an entrepreneur with an existing start-up?\nYou have a company with a unique entrepreneurial model.\nYou are looking to scale up and don\u2019t know how to find investment.\nYou are looking for investment opportunities.\nYou want to meet fellow experienced entrepreneurs and investors."
                  }
                </div>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"frame39539"}
              data-plasmic-override={overrides.frame39539}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame39539)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__areU8
                )}
              >
                {
                  "\u0634\u0631\u0643\u0627\u062a \u0646\u0627\u0634\u0626\u0629\n\u062a\u0639\u0628\u0626\u0629 \u0646\u0645\u0648\u062f\u062c \u0627\u0644\u0634\u0631\u0643\u0627\u062a \u0627\u0644\u0646\u0627\u0634\u0626\u0629"
                }
              </div>
              <Line9Icon
                className={classNames(projectcss.all, sty.svg__iDbDa)}
                role={"img"}
              />

              <Stack__
                as={"div"}
                data-plasmic-name={"form"}
                data-plasmic-override={overrides.form}
                hasGap={true}
                className={classNames(projectcss.all, sty.form)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"username"}
                  data-plasmic-override={overrides.username}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.username)}
                >
                  <div
                    data-plasmic-name={"inputTextLabel"}
                    data-plasmic-override={overrides.inputTextLabel}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.inputTextLabel
                    )}
                  >
                    {"Full Name*"}
                  </div>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"inputField"}
                    data-plasmic-override={overrides.inputField}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.inputField)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"text2"}
                      data-plasmic-override={overrides.text2}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.text2)}
                    >
                      <div
                        data-plasmic-name={"typeHere"}
                        data-plasmic-override={overrides.typeHere}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.typeHere
                        )}
                      >
                        {"Enter username"}
                      </div>
                      <div
                        data-plasmic-name={"icon"}
                        data-plasmic-override={overrides.icon}
                        className={classNames(projectcss.all, sty.icon)}
                      />
                    </Stack__>
                  </Stack__>
                  {false ? (
                    <div
                      data-plasmic-name={"assistiveText"}
                      data-plasmic-override={overrides.assistiveText}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.assistiveText
                      )}
                    >
                      {"Your password is between 4 and 12 characters"}
                    </div>
                  ) : null}
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"username2"}
                  data-plasmic-override={overrides.username2}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.username2)}
                >
                  <div
                    data-plasmic-name={"inputTextLabel2"}
                    data-plasmic-override={overrides.inputTextLabel2}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.inputTextLabel2
                    )}
                  >
                    {"Start Up Name*"}
                  </div>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"inputField2"}
                    data-plasmic-override={overrides.inputField2}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.inputField2)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"text3"}
                      data-plasmic-override={overrides.text3}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.text3)}
                    >
                      <div
                        data-plasmic-name={"typeHere2"}
                        data-plasmic-override={overrides.typeHere2}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.typeHere2
                        )}
                      >
                        {"Enter name"}
                      </div>
                      <div
                        data-plasmic-name={"icon2"}
                        data-plasmic-override={overrides.icon2}
                        className={classNames(projectcss.all, sty.icon2)}
                      />
                    </Stack__>
                  </Stack__>
                  {false ? (
                    <div
                      data-plasmic-name={"assistiveText2"}
                      data-plasmic-override={overrides.assistiveText2}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.assistiveText2
                      )}
                    >
                      {"Your password is between 4 and 12 characters"}
                    </div>
                  ) : null}
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"username3"}
                  data-plasmic-override={overrides.username3}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.username3)}
                >
                  <div
                    data-plasmic-name={"inputTextLabel3"}
                    data-plasmic-override={overrides.inputTextLabel3}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.inputTextLabel3
                    )}
                  >
                    {"Email Address*"}
                  </div>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"inputField3"}
                    data-plasmic-override={overrides.inputField3}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.inputField3)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"text4"}
                      data-plasmic-override={overrides.text4}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.text4)}
                    >
                      <div
                        data-plasmic-name={"typeHere3"}
                        data-plasmic-override={overrides.typeHere3}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.typeHere3
                        )}
                      >
                        {"Enter email-address"}
                      </div>
                      <div
                        data-plasmic-name={"icon3"}
                        data-plasmic-override={overrides.icon3}
                        className={classNames(projectcss.all, sty.icon3)}
                      />
                    </Stack__>
                  </Stack__>
                  {false ? (
                    <div
                      data-plasmic-name={"assistiveText3"}
                      data-plasmic-override={overrides.assistiveText3}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.assistiveText3
                      )}
                    >
                      {"Your password is between 4 and 12 characters"}
                    </div>
                  ) : null}
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"username4"}
                  data-plasmic-override={overrides.username4}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.username4)}
                >
                  <div
                    data-plasmic-name={"inputTextLabel4"}
                    data-plasmic-override={overrides.inputTextLabel4}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.inputTextLabel4
                    )}
                  >
                    {"Number of Emplyees*"}
                  </div>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"inputField4"}
                    data-plasmic-override={overrides.inputField4}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.inputField4)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"text5"}
                      data-plasmic-override={overrides.text5}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.text5)}
                    >
                      <div
                        data-plasmic-name={"typeHere4"}
                        data-plasmic-override={overrides.typeHere4}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.typeHere4
                        )}
                      >
                        {"Enter number"}
                      </div>
                      <div
                        data-plasmic-name={"icon4"}
                        data-plasmic-override={overrides.icon4}
                        className={classNames(projectcss.all, sty.icon4)}
                      />
                    </Stack__>
                  </Stack__>
                  {false ? (
                    <div
                      data-plasmic-name={"assistiveText4"}
                      data-plasmic-override={overrides.assistiveText4}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.assistiveText4
                      )}
                    >
                      {"Your password is between 4 and 12 characters"}
                    </div>
                  ) : null}
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"dropdowns"}
                  data-plasmic-override={overrides.dropdowns}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.dropdowns)}
                >
                  <div
                    data-plasmic-name={"dropdownTitle"}
                    data-plasmic-override={overrides.dropdownTitle}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.dropdownTitle
                    )}
                  >
                    {"Start Up Location*"}
                  </div>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"inputField5"}
                    data-plasmic-override={overrides.inputField5}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.inputField5)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"text6"}
                      data-plasmic-override={overrides.text6}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.text6)}
                    >
                      <div
                        data-plasmic-name={"dropdownOption"}
                        data-plasmic-override={overrides.dropdownOption}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.dropdownOption
                        )}
                      >
                        {"City, Country"}
                      </div>
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__pRkev)}
                        displayHeight={"24px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"24px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/copy_of_website_think_creative/images/icon8.svg",
                          fullWidth: 24,
                          fullHeight: 24,
                          aspectRatio: 1
                        }}
                      />
                    </Stack__>
                  </Stack__>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"username5"}
                  data-plasmic-override={overrides.username5}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.username5)}
                >
                  <div
                    data-plasmic-name={"inputTextLabel5"}
                    data-plasmic-override={overrides.inputTextLabel5}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.inputTextLabel5
                    )}
                  >
                    {"Link to Start Up"}
                  </div>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"inputField6"}
                    data-plasmic-override={overrides.inputField6}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.inputField6)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"text7"}
                      data-plasmic-override={overrides.text7}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.text7)}
                    >
                      <div
                        data-plasmic-name={"typeHere5"}
                        data-plasmic-override={overrides.typeHere5}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.typeHere5
                        )}
                      >
                        {"Enter URL"}
                      </div>
                      <div
                        data-plasmic-name={"icon5"}
                        data-plasmic-override={overrides.icon5}
                        className={classNames(projectcss.all, sty.icon5)}
                      />
                    </Stack__>
                  </Stack__>
                  {false ? (
                    <div
                      data-plasmic-name={"assistiveText5"}
                      data-plasmic-override={overrides.assistiveText5}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.assistiveText5
                      )}
                    >
                      {"Your password is between 4 and 12 characters"}
                    </div>
                  ) : null}
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"dropdowns2"}
                  data-plasmic-override={overrides.dropdowns2}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.dropdowns2)}
                >
                  <div
                    data-plasmic-name={"dropdownTitle2"}
                    data-plasmic-override={overrides.dropdownTitle2}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.dropdownTitle2
                    )}
                  >
                    {"Size of Start Up (Revenue)"}
                  </div>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"inputField7"}
                    data-plasmic-override={overrides.inputField7}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.inputField7)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"text8"}
                      data-plasmic-override={overrides.text8}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.text8)}
                    >
                      <div
                        data-plasmic-name={"dropdownOption2"}
                        data-plasmic-override={overrides.dropdownOption2}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.dropdownOption2
                        )}
                      >
                        {"From, to"}
                      </div>
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__bFkm8)}
                        displayHeight={"24px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"24px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/copy_of_website_think_creative/images/icon9.svg",
                          fullWidth: 24,
                          fullHeight: 24,
                          aspectRatio: 1
                        }}
                      />
                    </Stack__>
                  </Stack__>
                </Stack__>
                {false ? (
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"textInputs"}
                    data-plasmic-override={overrides.textInputs}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.textInputs)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rWRp
                      )}
                    >
                      {"Input Text Label"}
                    </div>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"inputField8"}
                      data-plasmic-override={overrides.inputField8}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.inputField8)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"text9"}
                        data-plasmic-override={overrides.text9}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.text9)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__cCTd
                          )}
                        >
                          {"Typing |"}
                        </div>
                        <div
                          data-plasmic-name={"icon6"}
                          data-plasmic-override={overrides.icon6}
                          className={classNames(projectcss.all, sty.icon6)}
                        />
                      </Stack__>
                    </Stack__>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qv3Uh
                      )}
                    >
                      {"Assistive Text"}
                    </div>
                  </Stack__>
                ) : null}
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"cta"}
                data-plasmic-override={overrides.cta}
                hasGap={true}
                className={classNames(projectcss.all, sty.cta)}
              >
                <Button
                  data-plasmic-name={"openButton"}
                  data-plasmic-override={overrides.openButton}
                  className={classNames("__wab_instance", sty.openButton)}
                />
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              hasGap={true}
              className={classNames(projectcss.all, sty.footer)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"frame"}
                data-plasmic-override={overrides.frame}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"thinkCrative"}
                  data-plasmic-override={overrides.thinkCrative}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.thinkCrative)}
                >
                  <ThinkCreativeLogoIcon
                    className={classNames(projectcss.all, sty.svg__egzlR)}
                    role={"img"}
                  />

                  <div
                    data-plasmic-name={"description"}
                    data-plasmic-override={overrides.description}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.description
                    )}
                  >
                    {
                      "\u0623\u062d\u062f\u062b \u0627\u0644\u062a\u063a\u064a\u064a\u0631. \u0641\u0643\u0631 \u0628\u0625\u0628\u062f\u0627\u0639."
                    }
                  </div>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"companyDetails"}
                    data-plasmic-override={overrides.companyDetails}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.companyDetails)}
                  >
                    <CanvasLogo2Icon
                      className={classNames(projectcss.all, sty.svg__eNWwk)}
                      role={"img"}
                    />

                    <Stack__
                      as={"div"}
                      data-plasmic-name={"socialMediaContainer"}
                      data-plasmic-override={overrides.socialMediaContainer}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.socialMediaContainer
                      )}
                    >
                      <SocialMediaIconSquareFacebookIcon
                        className={classNames(projectcss.all, sty.svg__rudqB)}
                        role={"img"}
                      />

                      <SocialMediaIconSquareInstagramIcon
                        className={classNames(projectcss.all, sty.svg__ae5C)}
                        role={"img"}
                      />

                      <div
                        data-plasmic-name={"socialMediaIconSquareLinkedIn"}
                        data-plasmic-override={
                          overrides.socialMediaIconSquareLinkedIn
                        }
                        className={classNames(
                          projectcss.all,
                          sty.socialMediaIconSquareLinkedIn
                        )}
                      >
                        <Group73Icon
                          className={classNames(projectcss.all, sty.svg__w33Rg)}
                          role={"img"}
                        />
                      </div>
                    </Stack__>
                  </Stack__>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"details"}
                  data-plasmic-override={overrides.details}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.details)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"footerColumn"}
                    data-plasmic-override={overrides.footerColumn}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.footerColumn)}
                  >
                    <div
                      data-plasmic-name={"footerTitle"}
                      data-plasmic-override={overrides.footerTitle}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.footerTitle
                      )}
                    >
                      {"\u0645\u0646 \u0646\u062d\u0646"}
                    </div>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"footerLinks"}
                      data-plasmic-override={overrides.footerLinks}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.footerLinks)}
                    >
                      <div
                        data-plasmic-name={"link"}
                        data-plasmic-override={overrides.link}
                        className={classNames(projectcss.all, sty.link)}
                      >
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"masterLink"}
                          data-plasmic-override={overrides.masterLink}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.masterLink)}
                        >
                          {false ? (
                            <div
                              data-plasmic-name={"lineRoundedPassword"}
                              data-plasmic-override={
                                overrides.lineRoundedPassword
                              }
                              className={classNames(
                                projectcss.all,
                                sty.lineRoundedPassword
                              )}
                            >
                              <PasswordIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__mEhvK
                                )}
                                role={"img"}
                              />
                            </div>
                          ) : null}
                          <div
                            data-plasmic-name={"whatIsCanvas"}
                            data-plasmic-override={overrides.whatIsCanvas}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.whatIsCanvas
                            )}
                          >
                            {
                              "\u0645\u0627 \u0647\u0648 \u0643\u0627\u0646\u0641\u0627\u0633"
                            }
                          </div>
                          {false ? (
                            <div
                              data-plasmic-name={"lineRoundedChevronDown"}
                              data-plasmic-override={
                                overrides.lineRoundedChevronDown
                              }
                              className={classNames(
                                projectcss.all,
                                sty.lineRoundedChevronDown
                              )}
                            >
                              <ChevronIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__yC0Jz
                                )}
                                role={"img"}
                              />
                            </div>
                          ) : null}
                        </Stack__>
                      </div>
                    </Stack__>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"footerColumn2"}
                    data-plasmic-override={overrides.footerColumn2}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.footerColumn2)}
                  >
                    <div
                      data-plasmic-name={"footerTitle2"}
                      data-plasmic-override={overrides.footerTitle2}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.footerTitle2
                      )}
                    >
                      {"\u0645\u0628\u0627\u062f\u0631\u0627\u062a\u0646\u0627"}
                    </div>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"footerLinks2"}
                      data-plasmic-override={overrides.footerLinks2}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.footerLinks2)}
                    >
                      <div
                        data-plasmic-name={"link2"}
                        data-plasmic-override={overrides.link2}
                        className={classNames(projectcss.all, sty.link2)}
                      >
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"masterLink2"}
                          data-plasmic-override={overrides.masterLink2}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.masterLink2
                          )}
                        >
                          {false ? (
                            <div
                              data-plasmic-name={"lineRoundedPassword2"}
                              data-plasmic-override={
                                overrides.lineRoundedPassword2
                              }
                              className={classNames(
                                projectcss.all,
                                sty.lineRoundedPassword2
                              )}
                            >
                              <PasswordIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__mCwhF
                                )}
                                role={"img"}
                              />
                            </div>
                          ) : null}
                          <div
                            data-plasmic-name={"forEntrepreneurs"}
                            data-plasmic-override={overrides.forEntrepreneurs}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.forEntrepreneurs
                            )}
                          >
                            {
                              "\u0644\u0631\u062c\u0627\u0644 \u0627\u0644\u0623\u0639\u0645\u0627\u0644"
                            }
                          </div>
                          {false ? (
                            <div
                              data-plasmic-name={"lineRoundedChevronDown2"}
                              data-plasmic-override={
                                overrides.lineRoundedChevronDown2
                              }
                              className={classNames(
                                projectcss.all,
                                sty.lineRoundedChevronDown2
                              )}
                            >
                              <ChevronIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__pBNzE
                                )}
                                role={"img"}
                              />
                            </div>
                          ) : null}
                        </Stack__>
                      </div>
                      <div
                        data-plasmic-name={"link3"}
                        data-plasmic-override={overrides.link3}
                        className={classNames(projectcss.all, sty.link3)}
                      >
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"masterLink3"}
                          data-plasmic-override={overrides.masterLink3}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.masterLink3
                          )}
                        >
                          {false ? (
                            <div
                              data-plasmic-name={"lineRoundedPassword3"}
                              data-plasmic-override={
                                overrides.lineRoundedPassword3
                              }
                              className={classNames(
                                projectcss.all,
                                sty.lineRoundedPassword3
                              )}
                            >
                              <PasswordIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__gLg2Y
                                )}
                                role={"img"}
                              />
                            </div>
                          ) : null}
                          <div
                            data-plasmic-name={"forInvestores"}
                            data-plasmic-override={overrides.forInvestores}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.forInvestores
                            )}
                          >
                            {
                              "\u0644\u0644\u0645\u0633\u062a\u062b\u0645\u0631\u064a\u0646"
                            }
                          </div>
                          {false ? (
                            <div
                              data-plasmic-name={"lineRoundedChevronDown3"}
                              data-plasmic-override={
                                overrides.lineRoundedChevronDown3
                              }
                              className={classNames(
                                projectcss.all,
                                sty.lineRoundedChevronDown3
                              )}
                            >
                              <ChevronIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___81J6
                                )}
                                role={"img"}
                              />
                            </div>
                          ) : null}
                        </Stack__>
                      </div>
                    </Stack__>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame39468"}
                    data-plasmic-override={overrides.frame39468}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame39468)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"footerColumn3"}
                      data-plasmic-override={overrides.footerColumn3}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.footerColumn3)}
                    >
                      <div
                        data-plasmic-name={"footerTitle3"}
                        data-plasmic-override={overrides.footerTitle3}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.footerTitle3
                        )}
                      >
                        {
                          "\u062a\u0648\u0627\u0635\u0644 \u0645\u0639\u0646\u0627"
                        }
                      </div>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"frame39467"}
                      data-plasmic-override={overrides.frame39467}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame39467)}
                    >
                      <div
                        data-plasmic-name={"link4"}
                        data-plasmic-override={overrides.link4}
                        className={classNames(projectcss.all, sty.link4)}
                      >
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"masterLink4"}
                          data-plasmic-override={overrides.masterLink4}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.masterLink4
                          )}
                        >
                          <div
                            data-plasmic-name={"lineRoundedEmail"}
                            data-plasmic-override={overrides.lineRoundedEmail}
                            className={classNames(
                              projectcss.all,
                              sty.lineRoundedEmail
                            )}
                          >
                            <EmailIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__dkbZj
                              )}
                              role={"img"}
                            />
                          </div>
                          <div
                            data-plasmic-name={"linkItem"}
                            data-plasmic-override={overrides.linkItem}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.linkItem
                            )}
                          >
                            {"contact@company.com"}
                          </div>
                          {false ? (
                            <div
                              data-plasmic-name={"lineRoundedChevronDown4"}
                              data-plasmic-override={
                                overrides.lineRoundedChevronDown4
                              }
                              className={classNames(
                                projectcss.all,
                                sty.lineRoundedChevronDown4
                              )}
                            >
                              <ChevronIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__idMGb
                                )}
                                role={"img"}
                              />
                            </div>
                          ) : null}
                        </Stack__>
                      </div>
                      <div
                        data-plasmic-name={"link5"}
                        data-plasmic-override={overrides.link5}
                        className={classNames(projectcss.all, sty.link5)}
                      >
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"masterLink5"}
                          data-plasmic-override={overrides.masterLink5}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.masterLink5
                          )}
                        >
                          <div
                            data-plasmic-name={"lineRoundedPhone"}
                            data-plasmic-override={overrides.lineRoundedPhone}
                            className={classNames(
                              projectcss.all,
                              sty.lineRoundedPhone
                            )}
                          >
                            <PhoneIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__gvA0Z
                              )}
                              role={"img"}
                            />
                          </div>
                          <div
                            data-plasmic-name={"linkItem2"}
                            data-plasmic-override={overrides.linkItem2}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.linkItem2
                            )}
                          >
                            {"(000) 000 - 0000"}
                          </div>
                          {false ? (
                            <div
                              data-plasmic-name={"lineRoundedChevronDown5"}
                              data-plasmic-override={
                                overrides.lineRoundedChevronDown5
                              }
                              className={classNames(
                                projectcss.all,
                                sty.lineRoundedChevronDown5
                              )}
                            >
                              <ChevronIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__lH8N
                                )}
                                role={"img"}
                              />
                            </div>
                          ) : null}
                        </Stack__>
                      </div>
                      <div
                        data-plasmic-name={"group39465"}
                        data-plasmic-override={overrides.group39465}
                        className={classNames(projectcss.all, sty.group39465)}
                      >
                        <div
                          data-plasmic-name={"spacerIconWrapper"}
                          data-plasmic-override={overrides.spacerIconWrapper}
                          className={classNames(
                            projectcss.all,
                            sty.spacerIconWrapper
                          )}
                        >
                          <div
                            data-plasmic-name={"lineRoundedMark"}
                            data-plasmic-override={overrides.lineRoundedMark}
                            className={classNames(
                              projectcss.all,
                              sty.lineRoundedMark
                            )}
                          >
                            <MarkIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__a2WG
                              )}
                              role={"img"}
                            />
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"footerDescription"}
                          data-plasmic-override={overrides.footerDescription}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.footerDescription
                          )}
                        >
                          {"Lorem Lorem Lorem "}
                        </div>
                      </div>
                    </Stack__>
                  </Stack__>
                </Stack__>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"footerContent"}
                data-plasmic-override={overrides.footerContent}
                hasGap={true}
                className={classNames(projectcss.all, sty.footerContent)}
              >
                <div
                  data-plasmic-name={"footerContent2"}
                  data-plasmic-override={overrides.footerContent2}
                  className={classNames(projectcss.all, sty.footerContent2)}
                >
                  <div
                    data-plasmic-name={"footerLeft"}
                    data-plasmic-override={overrides.footerLeft}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.footerLeft
                    )}
                  >
                    {"Copyright \u00a9 2024 Think Creative"}
                  </div>
                  <div
                    data-plasmic-name={"footerRight"}
                    data-plasmic-override={overrides.footerRight}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.footerRight
                    )}
                  >
                    {
                      "\u0643\u0644 \u0627\u0644\u062d\u0642\u0648\u0642 \u0645\u062d\u0641\u0648\u0638\u0629"
                    }
                  </div>
                </div>
              </Stack__>
            </Stack__>
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "enterpreneursPage",
    "navElements",
    "pageContent",
    "frame39517",
    "frame39518",
    "frame39531",
    "text",
    "frame39513",
    "frame39510",
    "tPrivateSector",
    "increaseTheNumberOfStartups",
    "frame39511",
    "tPrivateSector2",
    "increaseTheNumberOfStartups2",
    "frame39512",
    "tPrivateSector3",
    "increaseTheNumberOfStartups3",
    "frame39508",
    "tPrivateSector4",
    "increaseTheNumberOfStartups4",
    "frame39538",
    "frame39536",
    "frame39539",
    "form",
    "username",
    "inputTextLabel",
    "inputField",
    "text2",
    "typeHere",
    "icon",
    "assistiveText",
    "username2",
    "inputTextLabel2",
    "inputField2",
    "text3",
    "typeHere2",
    "icon2",
    "assistiveText2",
    "username3",
    "inputTextLabel3",
    "inputField3",
    "text4",
    "typeHere3",
    "icon3",
    "assistiveText3",
    "username4",
    "inputTextLabel4",
    "inputField4",
    "text5",
    "typeHere4",
    "icon4",
    "assistiveText4",
    "dropdowns",
    "dropdownTitle",
    "inputField5",
    "text6",
    "dropdownOption",
    "username5",
    "inputTextLabel5",
    "inputField6",
    "text7",
    "typeHere5",
    "icon5",
    "assistiveText5",
    "dropdowns2",
    "dropdownTitle2",
    "inputField7",
    "text8",
    "dropdownOption2",
    "textInputs",
    "inputField8",
    "text9",
    "icon6",
    "cta",
    "openButton",
    "footer",
    "frame",
    "thinkCrative",
    "description",
    "companyDetails",
    "socialMediaContainer",
    "socialMediaIconSquareLinkedIn",
    "details",
    "footerColumn",
    "footerTitle",
    "footerLinks",
    "link",
    "masterLink",
    "lineRoundedPassword",
    "whatIsCanvas",
    "lineRoundedChevronDown",
    "footerColumn2",
    "footerTitle2",
    "footerLinks2",
    "link2",
    "masterLink2",
    "lineRoundedPassword2",
    "forEntrepreneurs",
    "lineRoundedChevronDown2",
    "link3",
    "masterLink3",
    "lineRoundedPassword3",
    "forInvestores",
    "lineRoundedChevronDown3",
    "frame39468",
    "footerColumn3",
    "footerTitle3",
    "frame39467",
    "link4",
    "masterLink4",
    "lineRoundedEmail",
    "linkItem",
    "lineRoundedChevronDown4",
    "link5",
    "masterLink5",
    "lineRoundedPhone",
    "linkItem2",
    "lineRoundedChevronDown5",
    "group39465",
    "spacerIconWrapper",
    "lineRoundedMark",
    "footerDescription",
    "footerContent",
    "footerContent2",
    "footerLeft",
    "footerRight"
  ],

  enterpreneursPage: [
    "enterpreneursPage",
    "navElements",
    "pageContent",
    "frame39517",
    "frame39518",
    "frame39531",
    "text",
    "frame39513",
    "frame39510",
    "tPrivateSector",
    "increaseTheNumberOfStartups",
    "frame39511",
    "tPrivateSector2",
    "increaseTheNumberOfStartups2",
    "frame39512",
    "tPrivateSector3",
    "increaseTheNumberOfStartups3",
    "frame39508",
    "tPrivateSector4",
    "increaseTheNumberOfStartups4",
    "frame39538",
    "frame39536",
    "frame39539",
    "form",
    "username",
    "inputTextLabel",
    "inputField",
    "text2",
    "typeHere",
    "icon",
    "assistiveText",
    "username2",
    "inputTextLabel2",
    "inputField2",
    "text3",
    "typeHere2",
    "icon2",
    "assistiveText2",
    "username3",
    "inputTextLabel3",
    "inputField3",
    "text4",
    "typeHere3",
    "icon3",
    "assistiveText3",
    "username4",
    "inputTextLabel4",
    "inputField4",
    "text5",
    "typeHere4",
    "icon4",
    "assistiveText4",
    "dropdowns",
    "dropdownTitle",
    "inputField5",
    "text6",
    "dropdownOption",
    "username5",
    "inputTextLabel5",
    "inputField6",
    "text7",
    "typeHere5",
    "icon5",
    "assistiveText5",
    "dropdowns2",
    "dropdownTitle2",
    "inputField7",
    "text8",
    "dropdownOption2",
    "textInputs",
    "inputField8",
    "text9",
    "icon6",
    "cta",
    "openButton",
    "footer",
    "frame",
    "thinkCrative",
    "description",
    "companyDetails",
    "socialMediaContainer",
    "socialMediaIconSquareLinkedIn",
    "details",
    "footerColumn",
    "footerTitle",
    "footerLinks",
    "link",
    "masterLink",
    "lineRoundedPassword",
    "whatIsCanvas",
    "lineRoundedChevronDown",
    "footerColumn2",
    "footerTitle2",
    "footerLinks2",
    "link2",
    "masterLink2",
    "lineRoundedPassword2",
    "forEntrepreneurs",
    "lineRoundedChevronDown2",
    "link3",
    "masterLink3",
    "lineRoundedPassword3",
    "forInvestores",
    "lineRoundedChevronDown3",
    "frame39468",
    "footerColumn3",
    "footerTitle3",
    "frame39467",
    "link4",
    "masterLink4",
    "lineRoundedEmail",
    "linkItem",
    "lineRoundedChevronDown4",
    "link5",
    "masterLink5",
    "lineRoundedPhone",
    "linkItem2",
    "lineRoundedChevronDown5",
    "group39465",
    "spacerIconWrapper",
    "lineRoundedMark",
    "footerDescription",
    "footerContent",
    "footerContent2",
    "footerLeft",
    "footerRight"
  ],

  navElements: ["navElements", "pageContent"],
  pageContent: ["pageContent"],
  frame39517: ["frame39517", "frame39518", "frame39531", "text"],
  frame39518: ["frame39518", "frame39531", "text"],
  frame39531: ["frame39531", "text"],
  text: ["text"],
  frame39513: [
    "frame39513",
    "frame39510",
    "tPrivateSector",
    "increaseTheNumberOfStartups",
    "frame39511",
    "tPrivateSector2",
    "increaseTheNumberOfStartups2",
    "frame39512",
    "tPrivateSector3",
    "increaseTheNumberOfStartups3",
    "frame39508",
    "tPrivateSector4",
    "increaseTheNumberOfStartups4"
  ],

  frame39510: ["frame39510", "tPrivateSector", "increaseTheNumberOfStartups"],
  tPrivateSector: ["tPrivateSector"],
  increaseTheNumberOfStartups: ["increaseTheNumberOfStartups"],
  frame39511: ["frame39511", "tPrivateSector2", "increaseTheNumberOfStartups2"],
  tPrivateSector2: ["tPrivateSector2"],
  increaseTheNumberOfStartups2: ["increaseTheNumberOfStartups2"],
  frame39512: ["frame39512", "tPrivateSector3", "increaseTheNumberOfStartups3"],
  tPrivateSector3: ["tPrivateSector3"],
  increaseTheNumberOfStartups3: ["increaseTheNumberOfStartups3"],
  frame39508: ["frame39508", "tPrivateSector4", "increaseTheNumberOfStartups4"],
  tPrivateSector4: ["tPrivateSector4"],
  increaseTheNumberOfStartups4: ["increaseTheNumberOfStartups4"],
  frame39538: ["frame39538", "frame39536"],
  frame39536: ["frame39536"],
  frame39539: [
    "frame39539",
    "form",
    "username",
    "inputTextLabel",
    "inputField",
    "text2",
    "typeHere",
    "icon",
    "assistiveText",
    "username2",
    "inputTextLabel2",
    "inputField2",
    "text3",
    "typeHere2",
    "icon2",
    "assistiveText2",
    "username3",
    "inputTextLabel3",
    "inputField3",
    "text4",
    "typeHere3",
    "icon3",
    "assistiveText3",
    "username4",
    "inputTextLabel4",
    "inputField4",
    "text5",
    "typeHere4",
    "icon4",
    "assistiveText4",
    "dropdowns",
    "dropdownTitle",
    "inputField5",
    "text6",
    "dropdownOption",
    "username5",
    "inputTextLabel5",
    "inputField6",
    "text7",
    "typeHere5",
    "icon5",
    "assistiveText5",
    "dropdowns2",
    "dropdownTitle2",
    "inputField7",
    "text8",
    "dropdownOption2",
    "textInputs",
    "inputField8",
    "text9",
    "icon6",
    "cta",
    "openButton"
  ],

  form: [
    "form",
    "username",
    "inputTextLabel",
    "inputField",
    "text2",
    "typeHere",
    "icon",
    "assistiveText",
    "username2",
    "inputTextLabel2",
    "inputField2",
    "text3",
    "typeHere2",
    "icon2",
    "assistiveText2",
    "username3",
    "inputTextLabel3",
    "inputField3",
    "text4",
    "typeHere3",
    "icon3",
    "assistiveText3",
    "username4",
    "inputTextLabel4",
    "inputField4",
    "text5",
    "typeHere4",
    "icon4",
    "assistiveText4",
    "dropdowns",
    "dropdownTitle",
    "inputField5",
    "text6",
    "dropdownOption",
    "username5",
    "inputTextLabel5",
    "inputField6",
    "text7",
    "typeHere5",
    "icon5",
    "assistiveText5",
    "dropdowns2",
    "dropdownTitle2",
    "inputField7",
    "text8",
    "dropdownOption2",
    "textInputs",
    "inputField8",
    "text9",
    "icon6"
  ],

  username: [
    "username",
    "inputTextLabel",
    "inputField",
    "text2",
    "typeHere",
    "icon",
    "assistiveText"
  ],

  inputTextLabel: ["inputTextLabel"],
  inputField: ["inputField", "text2", "typeHere", "icon"],
  text2: ["text2", "typeHere", "icon"],
  typeHere: ["typeHere"],
  icon: ["icon"],
  assistiveText: ["assistiveText"],
  username2: [
    "username2",
    "inputTextLabel2",
    "inputField2",
    "text3",
    "typeHere2",
    "icon2",
    "assistiveText2"
  ],

  inputTextLabel2: ["inputTextLabel2"],
  inputField2: ["inputField2", "text3", "typeHere2", "icon2"],
  text3: ["text3", "typeHere2", "icon2"],
  typeHere2: ["typeHere2"],
  icon2: ["icon2"],
  assistiveText2: ["assistiveText2"],
  username3: [
    "username3",
    "inputTextLabel3",
    "inputField3",
    "text4",
    "typeHere3",
    "icon3",
    "assistiveText3"
  ],

  inputTextLabel3: ["inputTextLabel3"],
  inputField3: ["inputField3", "text4", "typeHere3", "icon3"],
  text4: ["text4", "typeHere3", "icon3"],
  typeHere3: ["typeHere3"],
  icon3: ["icon3"],
  assistiveText3: ["assistiveText3"],
  username4: [
    "username4",
    "inputTextLabel4",
    "inputField4",
    "text5",
    "typeHere4",
    "icon4",
    "assistiveText4"
  ],

  inputTextLabel4: ["inputTextLabel4"],
  inputField4: ["inputField4", "text5", "typeHere4", "icon4"],
  text5: ["text5", "typeHere4", "icon4"],
  typeHere4: ["typeHere4"],
  icon4: ["icon4"],
  assistiveText4: ["assistiveText4"],
  dropdowns: [
    "dropdowns",
    "dropdownTitle",
    "inputField5",
    "text6",
    "dropdownOption"
  ],

  dropdownTitle: ["dropdownTitle"],
  inputField5: ["inputField5", "text6", "dropdownOption"],
  text6: ["text6", "dropdownOption"],
  dropdownOption: ["dropdownOption"],
  username5: [
    "username5",
    "inputTextLabel5",
    "inputField6",
    "text7",
    "typeHere5",
    "icon5",
    "assistiveText5"
  ],

  inputTextLabel5: ["inputTextLabel5"],
  inputField6: ["inputField6", "text7", "typeHere5", "icon5"],
  text7: ["text7", "typeHere5", "icon5"],
  typeHere5: ["typeHere5"],
  icon5: ["icon5"],
  assistiveText5: ["assistiveText5"],
  dropdowns2: [
    "dropdowns2",
    "dropdownTitle2",
    "inputField7",
    "text8",
    "dropdownOption2"
  ],

  dropdownTitle2: ["dropdownTitle2"],
  inputField7: ["inputField7", "text8", "dropdownOption2"],
  text8: ["text8", "dropdownOption2"],
  dropdownOption2: ["dropdownOption2"],
  textInputs: ["textInputs", "inputField8", "text9", "icon6"],
  inputField8: ["inputField8", "text9", "icon6"],
  text9: ["text9", "icon6"],
  icon6: ["icon6"],
  cta: ["cta", "openButton"],
  openButton: ["openButton"],
  footer: [
    "footer",
    "frame",
    "thinkCrative",
    "description",
    "companyDetails",
    "socialMediaContainer",
    "socialMediaIconSquareLinkedIn",
    "details",
    "footerColumn",
    "footerTitle",
    "footerLinks",
    "link",
    "masterLink",
    "lineRoundedPassword",
    "whatIsCanvas",
    "lineRoundedChevronDown",
    "footerColumn2",
    "footerTitle2",
    "footerLinks2",
    "link2",
    "masterLink2",
    "lineRoundedPassword2",
    "forEntrepreneurs",
    "lineRoundedChevronDown2",
    "link3",
    "masterLink3",
    "lineRoundedPassword3",
    "forInvestores",
    "lineRoundedChevronDown3",
    "frame39468",
    "footerColumn3",
    "footerTitle3",
    "frame39467",
    "link4",
    "masterLink4",
    "lineRoundedEmail",
    "linkItem",
    "lineRoundedChevronDown4",
    "link5",
    "masterLink5",
    "lineRoundedPhone",
    "linkItem2",
    "lineRoundedChevronDown5",
    "group39465",
    "spacerIconWrapper",
    "lineRoundedMark",
    "footerDescription",
    "footerContent",
    "footerContent2",
    "footerLeft",
    "footerRight"
  ],

  frame: [
    "frame",
    "thinkCrative",
    "description",
    "companyDetails",
    "socialMediaContainer",
    "socialMediaIconSquareLinkedIn",
    "details",
    "footerColumn",
    "footerTitle",
    "footerLinks",
    "link",
    "masterLink",
    "lineRoundedPassword",
    "whatIsCanvas",
    "lineRoundedChevronDown",
    "footerColumn2",
    "footerTitle2",
    "footerLinks2",
    "link2",
    "masterLink2",
    "lineRoundedPassword2",
    "forEntrepreneurs",
    "lineRoundedChevronDown2",
    "link3",
    "masterLink3",
    "lineRoundedPassword3",
    "forInvestores",
    "lineRoundedChevronDown3",
    "frame39468",
    "footerColumn3",
    "footerTitle3",
    "frame39467",
    "link4",
    "masterLink4",
    "lineRoundedEmail",
    "linkItem",
    "lineRoundedChevronDown4",
    "link5",
    "masterLink5",
    "lineRoundedPhone",
    "linkItem2",
    "lineRoundedChevronDown5",
    "group39465",
    "spacerIconWrapper",
    "lineRoundedMark",
    "footerDescription"
  ],

  thinkCrative: [
    "thinkCrative",
    "description",
    "companyDetails",
    "socialMediaContainer",
    "socialMediaIconSquareLinkedIn"
  ],

  description: ["description"],
  companyDetails: [
    "companyDetails",
    "socialMediaContainer",
    "socialMediaIconSquareLinkedIn"
  ],

  socialMediaContainer: [
    "socialMediaContainer",
    "socialMediaIconSquareLinkedIn"
  ],

  socialMediaIconSquareLinkedIn: ["socialMediaIconSquareLinkedIn"],
  details: [
    "details",
    "footerColumn",
    "footerTitle",
    "footerLinks",
    "link",
    "masterLink",
    "lineRoundedPassword",
    "whatIsCanvas",
    "lineRoundedChevronDown",
    "footerColumn2",
    "footerTitle2",
    "footerLinks2",
    "link2",
    "masterLink2",
    "lineRoundedPassword2",
    "forEntrepreneurs",
    "lineRoundedChevronDown2",
    "link3",
    "masterLink3",
    "lineRoundedPassword3",
    "forInvestores",
    "lineRoundedChevronDown3",
    "frame39468",
    "footerColumn3",
    "footerTitle3",
    "frame39467",
    "link4",
    "masterLink4",
    "lineRoundedEmail",
    "linkItem",
    "lineRoundedChevronDown4",
    "link5",
    "masterLink5",
    "lineRoundedPhone",
    "linkItem2",
    "lineRoundedChevronDown5",
    "group39465",
    "spacerIconWrapper",
    "lineRoundedMark",
    "footerDescription"
  ],

  footerColumn: [
    "footerColumn",
    "footerTitle",
    "footerLinks",
    "link",
    "masterLink",
    "lineRoundedPassword",
    "whatIsCanvas",
    "lineRoundedChevronDown"
  ],

  footerTitle: ["footerTitle"],
  footerLinks: [
    "footerLinks",
    "link",
    "masterLink",
    "lineRoundedPassword",
    "whatIsCanvas",
    "lineRoundedChevronDown"
  ],

  link: [
    "link",
    "masterLink",
    "lineRoundedPassword",
    "whatIsCanvas",
    "lineRoundedChevronDown"
  ],

  masterLink: [
    "masterLink",
    "lineRoundedPassword",
    "whatIsCanvas",
    "lineRoundedChevronDown"
  ],

  lineRoundedPassword: ["lineRoundedPassword"],
  whatIsCanvas: ["whatIsCanvas"],
  lineRoundedChevronDown: ["lineRoundedChevronDown"],
  footerColumn2: [
    "footerColumn2",
    "footerTitle2",
    "footerLinks2",
    "link2",
    "masterLink2",
    "lineRoundedPassword2",
    "forEntrepreneurs",
    "lineRoundedChevronDown2",
    "link3",
    "masterLink3",
    "lineRoundedPassword3",
    "forInvestores",
    "lineRoundedChevronDown3"
  ],

  footerTitle2: ["footerTitle2"],
  footerLinks2: [
    "footerLinks2",
    "link2",
    "masterLink2",
    "lineRoundedPassword2",
    "forEntrepreneurs",
    "lineRoundedChevronDown2",
    "link3",
    "masterLink3",
    "lineRoundedPassword3",
    "forInvestores",
    "lineRoundedChevronDown3"
  ],

  link2: [
    "link2",
    "masterLink2",
    "lineRoundedPassword2",
    "forEntrepreneurs",
    "lineRoundedChevronDown2"
  ],

  masterLink2: [
    "masterLink2",
    "lineRoundedPassword2",
    "forEntrepreneurs",
    "lineRoundedChevronDown2"
  ],

  lineRoundedPassword2: ["lineRoundedPassword2"],
  forEntrepreneurs: ["forEntrepreneurs"],
  lineRoundedChevronDown2: ["lineRoundedChevronDown2"],
  link3: [
    "link3",
    "masterLink3",
    "lineRoundedPassword3",
    "forInvestores",
    "lineRoundedChevronDown3"
  ],

  masterLink3: [
    "masterLink3",
    "lineRoundedPassword3",
    "forInvestores",
    "lineRoundedChevronDown3"
  ],

  lineRoundedPassword3: ["lineRoundedPassword3"],
  forInvestores: ["forInvestores"],
  lineRoundedChevronDown3: ["lineRoundedChevronDown3"],
  frame39468: [
    "frame39468",
    "footerColumn3",
    "footerTitle3",
    "frame39467",
    "link4",
    "masterLink4",
    "lineRoundedEmail",
    "linkItem",
    "lineRoundedChevronDown4",
    "link5",
    "masterLink5",
    "lineRoundedPhone",
    "linkItem2",
    "lineRoundedChevronDown5",
    "group39465",
    "spacerIconWrapper",
    "lineRoundedMark",
    "footerDescription"
  ],

  footerColumn3: ["footerColumn3", "footerTitle3"],
  footerTitle3: ["footerTitle3"],
  frame39467: [
    "frame39467",
    "link4",
    "masterLink4",
    "lineRoundedEmail",
    "linkItem",
    "lineRoundedChevronDown4",
    "link5",
    "masterLink5",
    "lineRoundedPhone",
    "linkItem2",
    "lineRoundedChevronDown5",
    "group39465",
    "spacerIconWrapper",
    "lineRoundedMark",
    "footerDescription"
  ],

  link4: [
    "link4",
    "masterLink4",
    "lineRoundedEmail",
    "linkItem",
    "lineRoundedChevronDown4"
  ],

  masterLink4: [
    "masterLink4",
    "lineRoundedEmail",
    "linkItem",
    "lineRoundedChevronDown4"
  ],

  lineRoundedEmail: ["lineRoundedEmail"],
  linkItem: ["linkItem"],
  lineRoundedChevronDown4: ["lineRoundedChevronDown4"],
  link5: [
    "link5",
    "masterLink5",
    "lineRoundedPhone",
    "linkItem2",
    "lineRoundedChevronDown5"
  ],

  masterLink5: [
    "masterLink5",
    "lineRoundedPhone",
    "linkItem2",
    "lineRoundedChevronDown5"
  ],

  lineRoundedPhone: ["lineRoundedPhone"],
  linkItem2: ["linkItem2"],
  lineRoundedChevronDown5: ["lineRoundedChevronDown5"],
  group39465: [
    "group39465",
    "spacerIconWrapper",
    "lineRoundedMark",
    "footerDescription"
  ],

  spacerIconWrapper: ["spacerIconWrapper", "lineRoundedMark"],
  lineRoundedMark: ["lineRoundedMark"],
  footerDescription: ["footerDescription"],
  footerContent: [
    "footerContent",
    "footerContent2",
    "footerLeft",
    "footerRight"
  ],

  footerContent2: ["footerContent2", "footerLeft", "footerRight"],
  footerLeft: ["footerLeft"],
  footerRight: ["footerRight"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCanvasEnterpreneursAr__ArgProps,
          internalVariantPropNames: PlasmicCanvasEnterpreneursAr__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCanvasEnterpreneursAr__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCanvasEnterpreneursAr";
  } else {
    func.displayName = `PlasmicCanvasEnterpreneursAr.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth(WrappedComponent) {
  const WithUsePlasmicAuthComponent = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "bWHFFGzvmXLfYr1WgyzKPi"
    });
    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicCanvasEnterpreneursAr = Object.assign(
  // Top-level PlasmicCanvasEnterpreneursAr renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    enterpreneursPage: makeNodeComponent("enterpreneursPage"),
    navElements: makeNodeComponent("navElements"),
    pageContent: makeNodeComponent("pageContent"),
    frame39517: makeNodeComponent("frame39517"),
    frame39518: makeNodeComponent("frame39518"),
    frame39531: makeNodeComponent("frame39531"),
    text: makeNodeComponent("text"),
    frame39513: makeNodeComponent("frame39513"),
    frame39510: makeNodeComponent("frame39510"),
    tPrivateSector: makeNodeComponent("tPrivateSector"),
    increaseTheNumberOfStartups: makeNodeComponent(
      "increaseTheNumberOfStartups"
    ),
    frame39511: makeNodeComponent("frame39511"),
    tPrivateSector2: makeNodeComponent("tPrivateSector2"),
    increaseTheNumberOfStartups2: makeNodeComponent(
      "increaseTheNumberOfStartups2"
    ),
    frame39512: makeNodeComponent("frame39512"),
    tPrivateSector3: makeNodeComponent("tPrivateSector3"),
    increaseTheNumberOfStartups3: makeNodeComponent(
      "increaseTheNumberOfStartups3"
    ),
    frame39508: makeNodeComponent("frame39508"),
    tPrivateSector4: makeNodeComponent("tPrivateSector4"),
    increaseTheNumberOfStartups4: makeNodeComponent(
      "increaseTheNumberOfStartups4"
    ),
    frame39538: makeNodeComponent("frame39538"),
    frame39536: makeNodeComponent("frame39536"),
    frame39539: makeNodeComponent("frame39539"),
    form: makeNodeComponent("form"),
    username: makeNodeComponent("username"),
    inputTextLabel: makeNodeComponent("inputTextLabel"),
    inputField: makeNodeComponent("inputField"),
    text2: makeNodeComponent("text2"),
    typeHere: makeNodeComponent("typeHere"),
    icon: makeNodeComponent("icon"),
    assistiveText: makeNodeComponent("assistiveText"),
    username2: makeNodeComponent("username2"),
    inputTextLabel2: makeNodeComponent("inputTextLabel2"),
    inputField2: makeNodeComponent("inputField2"),
    text3: makeNodeComponent("text3"),
    typeHere2: makeNodeComponent("typeHere2"),
    icon2: makeNodeComponent("icon2"),
    assistiveText2: makeNodeComponent("assistiveText2"),
    username3: makeNodeComponent("username3"),
    inputTextLabel3: makeNodeComponent("inputTextLabel3"),
    inputField3: makeNodeComponent("inputField3"),
    text4: makeNodeComponent("text4"),
    typeHere3: makeNodeComponent("typeHere3"),
    icon3: makeNodeComponent("icon3"),
    assistiveText3: makeNodeComponent("assistiveText3"),
    username4: makeNodeComponent("username4"),
    inputTextLabel4: makeNodeComponent("inputTextLabel4"),
    inputField4: makeNodeComponent("inputField4"),
    text5: makeNodeComponent("text5"),
    typeHere4: makeNodeComponent("typeHere4"),
    icon4: makeNodeComponent("icon4"),
    assistiveText4: makeNodeComponent("assistiveText4"),
    dropdowns: makeNodeComponent("dropdowns"),
    dropdownTitle: makeNodeComponent("dropdownTitle"),
    inputField5: makeNodeComponent("inputField5"),
    text6: makeNodeComponent("text6"),
    dropdownOption: makeNodeComponent("dropdownOption"),
    username5: makeNodeComponent("username5"),
    inputTextLabel5: makeNodeComponent("inputTextLabel5"),
    inputField6: makeNodeComponent("inputField6"),
    text7: makeNodeComponent("text7"),
    typeHere5: makeNodeComponent("typeHere5"),
    icon5: makeNodeComponent("icon5"),
    assistiveText5: makeNodeComponent("assistiveText5"),
    dropdowns2: makeNodeComponent("dropdowns2"),
    dropdownTitle2: makeNodeComponent("dropdownTitle2"),
    inputField7: makeNodeComponent("inputField7"),
    text8: makeNodeComponent("text8"),
    dropdownOption2: makeNodeComponent("dropdownOption2"),
    textInputs: makeNodeComponent("textInputs"),
    inputField8: makeNodeComponent("inputField8"),
    text9: makeNodeComponent("text9"),
    icon6: makeNodeComponent("icon6"),
    cta: makeNodeComponent("cta"),
    openButton: makeNodeComponent("openButton"),
    footer: makeNodeComponent("footer"),
    frame: makeNodeComponent("frame"),
    thinkCrative: makeNodeComponent("thinkCrative"),
    description: makeNodeComponent("description"),
    companyDetails: makeNodeComponent("companyDetails"),
    socialMediaContainer: makeNodeComponent("socialMediaContainer"),
    socialMediaIconSquareLinkedIn: makeNodeComponent(
      "socialMediaIconSquareLinkedIn"
    ),
    details: makeNodeComponent("details"),
    footerColumn: makeNodeComponent("footerColumn"),
    footerTitle: makeNodeComponent("footerTitle"),
    footerLinks: makeNodeComponent("footerLinks"),
    link: makeNodeComponent("link"),
    masterLink: makeNodeComponent("masterLink"),
    lineRoundedPassword: makeNodeComponent("lineRoundedPassword"),
    whatIsCanvas: makeNodeComponent("whatIsCanvas"),
    lineRoundedChevronDown: makeNodeComponent("lineRoundedChevronDown"),
    footerColumn2: makeNodeComponent("footerColumn2"),
    footerTitle2: makeNodeComponent("footerTitle2"),
    footerLinks2: makeNodeComponent("footerLinks2"),
    link2: makeNodeComponent("link2"),
    masterLink2: makeNodeComponent("masterLink2"),
    lineRoundedPassword2: makeNodeComponent("lineRoundedPassword2"),
    forEntrepreneurs: makeNodeComponent("forEntrepreneurs"),
    lineRoundedChevronDown2: makeNodeComponent("lineRoundedChevronDown2"),
    link3: makeNodeComponent("link3"),
    masterLink3: makeNodeComponent("masterLink3"),
    lineRoundedPassword3: makeNodeComponent("lineRoundedPassword3"),
    forInvestores: makeNodeComponent("forInvestores"),
    lineRoundedChevronDown3: makeNodeComponent("lineRoundedChevronDown3"),
    frame39468: makeNodeComponent("frame39468"),
    footerColumn3: makeNodeComponent("footerColumn3"),
    footerTitle3: makeNodeComponent("footerTitle3"),
    frame39467: makeNodeComponent("frame39467"),
    link4: makeNodeComponent("link4"),
    masterLink4: makeNodeComponent("masterLink4"),
    lineRoundedEmail: makeNodeComponent("lineRoundedEmail"),
    linkItem: makeNodeComponent("linkItem"),
    lineRoundedChevronDown4: makeNodeComponent("lineRoundedChevronDown4"),
    link5: makeNodeComponent("link5"),
    masterLink5: makeNodeComponent("masterLink5"),
    lineRoundedPhone: makeNodeComponent("lineRoundedPhone"),
    linkItem2: makeNodeComponent("linkItem2"),
    lineRoundedChevronDown5: makeNodeComponent("lineRoundedChevronDown5"),
    group39465: makeNodeComponent("group39465"),
    spacerIconWrapper: makeNodeComponent("spacerIconWrapper"),
    lineRoundedMark: makeNodeComponent("lineRoundedMark"),
    footerDescription: makeNodeComponent("footerDescription"),
    footerContent: makeNodeComponent("footerContent"),
    footerContent2: makeNodeComponent("footerContent2"),
    footerLeft: makeNodeComponent("footerLeft"),
    footerRight: makeNodeComponent("footerRight"),
    // Metadata about props expected for PlasmicCanvasEnterpreneursAr
    internalVariantProps: PlasmicCanvasEnterpreneursAr__VariantProps,
    internalArgProps: PlasmicCanvasEnterpreneursAr__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicCanvasEnterpreneursAr;
/* prettier-ignore-end */
